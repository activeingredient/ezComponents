eZ component: Webdav, Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
:Author:   Kore Nordmann, Tobias Schlitt
:Revision: //autogentag//
:Date:     $date$

Introduction
============

Description
-----------

The purpose of this component is acting as a webdav server, let clients
download, upload and modify files from various sources.

Requirements
============

The first version of the component should support a filesystem as backend and
make it easy to write own custom backends for the data storage of the 
webdav server. Imaginable are database backends, FTP-Servers and many more.

A major problem to be solved by this component is, that most implementations of
WebDAV clients violate the RFC, each in a different way. The component needs to
abstract from these violation and to make it easy to support new clients. On
each platform at least one client should be supported in the initial release,
as there are:

- Konqueror (Unix, KDE)
- Nautilus (Unix, Gnome)
- Internet Explorer, old and new implementation (Windows)
- Finder (MacOS)

Optionally:

- Firefox (Multi platform)

The default, RFC compliant, implementation must still be available and can be
tested using cadaver, the most standard compliance webdav client available.

Special Considerations
======================

Clients & Datasources
---------------------

The component should be flexible enough to easily add support for other
misbehaving clients later, and to easily add other datasources then the
filesystem backend. An abstraction of both tiers is necessary.

Locking
-------

Locking support is not required to be supported by the webdav server. We
should make it possible for the storage backend to implement any combination
of shared and exclusive locks, like the RFC states:

	A WebDAV compliant server is not required to support locking in any
	form.  If the server does support locking it may choose to support
	any combination of exclusive and shared locks for any access types.

Metadata
--------

Webdav supports any kind of metadata in addition to the data required by the
RFC, which is possible through costom or predefinde properties.  The storage of
these properties needs to implemented by the server. The predefined properties,
"live properties", needs to be validated by the server, while "dead
properties", user / client defined ones, are left untouched by the server. The
API of the backend classes still need a possibility to provide such dead
properties and to react on properties defined by the client.

It should be up to the storage backend to properly implement the storage of
this data. For example, the filesystem backend may use XML files attached to
the documents, or special file mechanisms like `XMP`__ to store the meta data
directly in the file headers.

__ http://wiki.creativecommons.org/XMP

Extensions
----------

Perhaps consider extensions of the Webdav protocol, like versioning and VCS 
support, to be easily integrated later.

Formats
=======

In the first iteration of the component we will implement `RFC 2518`__ with
extensions for misbehaving clients.

We will not support webdav extensions like distributed authoring and
versioning defined in `RFC 3253`__ in the first stage, but keep these ideas in
mind during the design phase.

__ http://tools.ietf.org/rfc/rfc2518
__ http://tools.ietf.org/rfc/rfc3253

Other webdav related RFCs

- `RFC 2291`__ - Requirements for a Distributed Authoring and Versioning 
  Protocol for the World Wide Web
- `RFC 2518`__ - HTTP Extensions for Distributed Authoring - WEBDAV
- `RFC 3253`__ - Versioning Extensions to WebDAV
- `RFC 3648`__ - Web Distributed Authoring and Versioning (WebDAV) Order
  Collections Protocol
- `RFC 3744`__ - Web Distributed Authoring and Versioning (WebDAV) Access
  Control Protocol
- `RFC 4316`__ - Datatypes for Web Distributed Authoring and Versioning
  (WebDAV) Properties
- `RFC 4331`__ - Quota and Size Properties for Distributed Authoring and
  Versioning (DAV) Collections
- `RFC 4437`__ - Web Distributed Authoring and Versioning (WebDAV) Redirect
  Reference Resources

__ http://tools.ietf.org/rfc/rfc2291
__ http://tools.ietf.org/rfc/rfc2518
__ http://tools.ietf.org/rfc/rfc3253
__ http://tools.ietf.org/rfc/rfc3648
__ http://tools.ietf.org/rfc/rfc3744
__ http://tools.ietf.org/rfc/rfc4316
__ http://tools.ietf.org/rfc/rfc4331
__ http://tools.ietf.org/rfc/rfc4437


..
   Local Variables:
   mode: rst
   fill-column: 79
   End:
   vim: et syn=rst tw=79
