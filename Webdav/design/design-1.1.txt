eZ component: Webdav, Design, 1.2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:Author: Tobias Schlitt
:Revision: $Rev$
:Date: $Date$
:Status: Draft

.. contents::

Scope
^^^^^

The scope of this document is to describe the enhancements for the Webdav
component version 1.2.

The general goal for this version is to support locking as described in RFC
2518. To achieve this, the if-header must be parsed and respected by the Webdav
component. This currently is not the case. The if-header must also be used to
respect Etags, which is not an integral part of the locking feature. However,
the support of Etags is part of this design, too. 

The following issues are covered in this design:

- Webdav does not provide ETags and does not honor the if-header with them
  (#12583).
- Lock support (#12286).

Common concerns
^^^^^^^^^^^^^^^

This section introduces common concerns of the issues covered in this design
document and the features resulting from them. Especually the if-header and its
support in the Webdav component are described.


Etag support
^^^^^^^^^^^^

This section describes the support of Etags in the Webdav component, including
the usage of the if-header with Etags and the generation and sending of the
Etag header.

============
RFC Overview
============

Etags (Entity Tags) are generally used in the HTTP/1.1 protocol to provide a
mechanism of validating that a resource is in the same state. Whenever the
state of a resource changes, its Etag needs to change. In following, the
definition of the HTTP/1.1 validation mechanisms in general, the defintion of
an Etag and the definition of the ETag-header are described. In addition the
usage of Etags in the Webdav RFC is described.

Entity Tags
===========

Section 3.11 of the HTTP/1.1 RFC describes entity tags. These strings identify
(tag) the state of a recource, named "entities" in the RFC. The entity tag
consists of a quoted string and an optional weakness modifier. The quoted
string must be unique for each state. ::

      entity-tag = [ weak ] opaque-tag
      weak       = "W/"
      opaque-tag = quoted-string

A non-weak entity tag must identify a certain state uniquely. With the added W/
prefix, one and the same tag may identify different states of a resource that
are semantically equivalent.

Entity tags are used in HTTP/1.1 in combination with the following headers:

- Request
  - If-Match
  - If-None-Match
  - If-Range
-Response
  - ETag

Since the Webdav component will generate the entity tag, we should ensure to
only generate strong entity tags.

Headers
=======

The following section describes the headers that are affected by entity tags
and how the server should repect them.

If-Match
--------

The If-Match header is generally used to make the method it is send with
conditional. Only if the conditions defined by the header are met, the action
associated with the method should be performed by the server.

The header format is defined as follows (14.24): ::

       If-Match = "If-Match" ":" ( "*" | 1#entity-tag )

The If-Match header in general asumes that the affected resource exists, if it
does not, the request must fail since no entity is there to compare the given
criteria too (no entity exists). The header either specifies "*", to indicate
that an entity must exist, whichever that is. Alternatively any number of
entity tags can be given, devided by ",". If one of the given tags match the
current state of the resource, the method is performed as if not If-Match
header was given. Else the method must fail with 412 (Precondition failed).

In case the request would have failed anyway (not result in a 2xx or 412
status), the If-Match condition is not even checked, but the error response
generated by the request is returned. The reaction of a server to a combination
of multiple If-* headers is undefined.

.. Note::
   We should just throw all If-* headers away if a combination of the occurs,
   so the backend does not need to deal with it.

Examples: ::

       If-Match: "xyzzy"
       If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
       If-Match: *

If-None-Match
-------------

This header behaves similar to the If-Match header, except that the operation
is only performed if none of the submitted entity tags matches. In case the
operation is a GET or a HEAD operation and one of the tags matched, the server
should return a 304 (Not Modified) code, in all other cases a 412 (Precondition
Failed) must be returned.

The header is defined like this: ::

       If-None-Match = "If-None-Match" ":" ( "*" | 1#entity-tag )

The '*' again means that any entity tag exists (as for If-Match). In case of
the If-None-Match header, the operation will be executed only of no entity of
the resource exists. In fact this means that the resource does not exist.

Examples: ::

       If-None-Match: "xyzzy"
       If-None-Match: W/"xyzzy"
       If-None-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
       If-None-Match: W/"xyzzy", W/"r2d2xxxx", W/"c3piozzzz"
       If-None-Match: *

If-Range
--------

The If-Range header does only make sense to be repected, if the server supports
partial GET requests and resuming of such. Since the Webdav component does not
support this, yet, the header will be ignored.

.. Note::
   If we support partial GET sometimes, support for this header must be
   considered, too.

ETag
----

The ETag header is send by a server to give the client an entity-tag for the
current resource that he can use later with any of the headers described above.
The ETag header is therefore a response header, while the headers described
above are request headers.

The ETag header is build up like this: ::
      
      ETag = "ETag" ":" entity-tag

Examples::

      ETag: "xyzzy"
      ETag: W/"xyzzy"
      ETag: ""

.. Attention::
   The following is an asumption that should be verified somehow. It seems that
   the ETag header is only defined for a single resource, which indicates that
   responses that affect multiple resources should not contain it.  For Webdav
   this includes several methods like COPY and MOVE, but also PROPFIND with a
   Depth header other than 0.


Lock support
^^^^^^^^^^^^

Locking allows a WebDAV client to gain exclusive access to a resource
(collection or non-collection) to avoid the "lost update problem". This means
that a client can define to have exclusive access to a resource for a certain
time, where no other client may gain access to this resource.

The WebDAV RFC distinguishes locks by 2 essential properties: The scope of the
lock (shared vs. exclusive) and the type of the lock (write vs. read), while
for the type only a write lock is specified. Using an exclusive lock the client
ensures that he has absolutly exclusive access to the locked resource. With a
shared lock it is possible the multiple clients take part in one and the same
lock. More information on lock scopes are provided later.

============
RFC overview
============

This section tries to summarize the important facts about locking mentioned in
RFC 2518 in various places, enhanced by first pre-considerations of design and
implementation issues associated with them.

Lock types
==========

The WebDAV RFC distinguishes between read and write locks, while only write
locks are defined in detail. The RFC explains, that "the syntax is extensible,
and permits the eventual specification of locking for other access types".

A write lock determines that the locking principle may exclusively write to the
affected resources. Reading is possibly for every other client, too. If a
client that does not hold a specific lock tries to perform a writing operation
to a resource which is locked by another client, this operation must fail.

Lock scopes
===========

The WebDAV RFC specifies 2 different scopes for locking:

- Exclusive
- Shared

For an exclusive lock exactly 1 client may hold a lock on a specific resource
and only this client is allowed to perform the affected operations on the
locked resource. For a shared lock it is possible that multiple clients take
part in the lock (group editing). Every client that takes part in a shared lock
may perform the affected operations on the locked resource.

WebDAV does not provide any channel to allow communication between the clients
involved into a shared lock. The communication of these clients must be handled
externally.

Lock tokens
===========

A lock token identifies a specific lock uniquely across all resources for all
times. Whenever a successful LOCK request was processed, it returns the
specific lock token for this lock. The lock token associates the locking client
with the locked resource. Therefore multiple lock tokens might be assigned to a
single resource, if the lock is a shared lock.

A lock token must be unique throughout all resources for all times. The WebDAV
RFC therefore defines a lock token scheme, which can optionally be used by the
server. The so called "opaquelocktoekn" scheme makes use of UUID_, as defined
in `ISO-11578`_. A `PECL package for UUIDs`_ is available.

.. _`UUID`: http://en.wikipedia.org/wiki/UUID
.. _`ISO-11578`: http://www.iso.ch/cate/d2229.html
.. _`PECL package for UUIDs`: http://pecl.php.net/package/uuid

Since the opaquelocktoken scheme is not mandatory, the code snippet ::

    $token = md5( uniqid( rand(), true ) ); 

could be used as an alternative to provide the necessary amount of uniqueness. 
To create a lock token that, a this way generated ID could be appended to the
URI of the affected resource to provide transparency of the source of a lock
token. For example: http://webdav/foo/bar.txt#<id>.

Every client that can access the WebDAV server has access to lock tokens
through the LOCKDISCOVERY request method, so the lock must be bound to a
different authentication mechanism. An owner string is submitted with the LOCK
request, which might help here.

Affected requests
=================

Locks affect several request, beside the explicitly lock related reuqests. The
following 2 sections summarize the affected request methods and give a short
overview about how these are affected.

Dedicated methods
-----------------

LOCK
  The LOCK method is used to initially establish a lock and to refresh locks.

UNLOCK
  The UNLOCK method is used to release a specific lock before it times out
  automatically.

Affected base methods
---------------------

The following methods may only be performed on a locked resource if the
performing client owns the specific lock.

- PUT
- POST
- PROPPATCH
- MOVE
- DELETE
- MKCOL

In addition the PROPFIND request is affected by lock support, since lock
information is visible to every client through the LOCKDISCOVERY and
SUPPORTEDLOCK properties.

Locking resources
=================

Both types of resources (non-collection and collection resources) can be
locked. This section describes differences for both types and other points
directly related to locking resources.

Non-collection resources
------------------------

A non collection resource can be affected directly or indirectly by a lock. In
the first case a client has issued a LOCK request explicitly for this resource,
only locking this single resource. The second case occurs, if a client locked a
collection resource and the non-collection resource is a direct or in-direct
descendant of it. For detailed information on this topic see the next section
about locking if collection resources.

Collections
-----------

The LOCK request allows the 'Depth' header to be set to specifiy the depth of
the created lock. A depth value of ZERO means, that only the affected
collection itself is locked. This might be sensible to add new resources to
this collection. The depth value INFINITY means that the created lock affects
all children of the collection in addition and recursivle all further
descendants of the collection. This way it is possible to lock a complete
sub-tree of the WebDAV repository.

Any lock (no matter which depth) on a collection prevents the addition and
removal of direct members of this collection by non-lock-owners. This affects
the following methods:

- PUT
- POST
- MKCOL
- DELETE

If a collection should be locked and any of its members is already locked, this
conflicts with the lock to be set and must result in an 423 error (Locked).
Memebers that are newly created inside a locked collection or copied/moved to
it are automatically included to the lock. This affects infinity-depth locks as
well as zero-depth ones for direct children of the locked collection.

Lock null resources
-------------------

A write lock might be accquired to a resource that does not (yet) exist. This
is called a "lock null resource". A lock null resource only supports the
methods:

- PUT
- MKCOL
- OPTIONS
- PROPFIND
- LOCK
- UNLOCK

All other methods must return 404 (Not found) or 405 (Method not allowed).

The properties of a null resource are mostly empty, except there must be
LOCKDISCOVERY and SUPPORTEDLOCK properties. If PUT or MKCOL are issued, a null
resource becomes a normal one. The RFC does not state if the lock stays on this
newly created (real) resource or if it is removed.

COPY/MOVE
---------

Both methods destroy locks. If a resource is moved to a locked collection, it
is automatically added to the lock (same client assumed). Both will not work,
if the destination is locked but no lock is owned by the client.

Refresh
=======

A LOCK request must not occur twice. To refresh a lock, clients send a LOCK
request with empty body and an If header that specifies the lock tokens to
refresh locks for. If this occurs, the timers of the lock must be reset. A
Timeout header might be send by the client, but the server may savely ignore
these and simply perform a refresh as it desires.

===================
Plugin design draft
===================

This section describes a potential realization of locking through a plugin for
the Webdav component. This plugin will make use of the, not yet officially
released, plugin API.

Design goals
============

This design drafts goal is to build a lock plugin that is almost completly
independant from the used backend. In this sense, the requirements to be
fulfilled by a backend must be cut down as far as possible. Beside that, the
plugin should provide the largest possible compatibility to clients. However a
plugin that hooks into the parsing process cannot provide the same client
compatibility mechanisms as the base Webdav transport layer.

Hooks
=====

The plugin needs to assign to several hooks offered by the plugin API, which
will be described roughly in this section.

parseUnknownRequest (ezcWebdavTransport)
----------------------------------------

The requests LOCK and UNLOCK are dedicated to the locking mechanism. Therefore
the plugin needs to hook inro parseUnknownRequest and parse the incoming
requests into (new) correscponding request objects.



===========
Open issues
===========

Authentication
==============

The problem
-----------

The WebDAV RFC specifies that lock tokens are not secure for authentication
since the can be obtained by every client with access to the repository through
the lockdiscovery property. Therefore, a server must provide its own
authentication scheme. We currently do not support any authentication mechanism
in the Webdav component. To realize locking, we need to support at least 1
authenticattion model in the component.

Solution attempt
----------------

The only possible authentication scheme provided through the HTTP protocol is
HTTP-Auth. Therefore the HTTP-Auth information should be integrated into every
request object, if provided. To check this information, an interface should be
provided that provides the following capabilities:

- Information of the assignement of a new lock token to a specific HTTP-Auth
  user.
- Removal of a lock token.
- Answer to the question if a certain user may perform an action with a given
  lock token.

In addition we should provide a basic implementation of this class, which does
actually not do anything but discard the given information and return true on
authentication question. This will not provide any security, but allow users to
plug their own authentication mechanisms into the lock facilities.

Further thoughts
----------------

In future it might be possibly that a WebdavAuthenticationTiein is implemented,
which might then be plugged into the described mechanism, too. This could in
addition be used for a "plugin" that performs authentication (and possibly
authorization?) in general on the transport/server level.

Lock null resources
===================

The problem
------------

For our special case this means, that we need to "physically" create
lock-null resources in the utilized backend, to make it persist during
requests, whenever a null-lock is acquired. This lock-null resource must
not appear as a real resource to the client (e.g. must not have a
correct content type and must not responde to GET requests). If the
resource is unlocked again, it must be removed from the backend again.

In our internal handling, that means, that we need to intervene any of
the operations not supported by a lock-null resource (e.g. COPY, MOVE,
PROPPATCH) requests to check is a lock-null resource is affected and
remove it potentially or forbid the operation. Furthermore, we need to
intervene any operation that is supported by a lock-null resource to
remove potential information from responses that must not be available
for lock-null resources. This will mean a lot of internally generated
requests to the backend and a lot of processing of the backend generated
responses.

For example, if a MOVE request is issued by a client, we need to check
the whole affected directory tree for lock-null resources and remove
those from the destination and send a special error code for them in the
response.

Atomicity of operations also comes into play here, since our internal
requests to the backend might interfer with other external requests. For
example, a null-lock might be acquired by the client while we are
internally checking the correctness of a MOVE request (race-condition).

Solution attempts
-----------------

I currently do not see a full solution for this problem, still there are
some ideas in my mind, that might be helpful. For lock-null resources we
can invent a special dead-property namespace to indicate such resources.
If a special (for lock-null resources forbidden) operation occurs, we
can easily check for them using a PROPFIND request. Creating and
maintaining lock-null resources should then be not problem.

For the race-condition issue, we'll definitly need support in the
backend, because I see no other solution attemt here to ensure the
consistency.


..
   Local Variables:
   mode: rst
   fill-column: 79
   End: 
   vim: et syn=rst tw=79
