eZ component: Webdav, Design, 1.2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:Author: Tobias Schlitt
:Revision: $Rev$
:Date: $Date$
:Status: Draft

.. contents::

Scope
^^^^^

The scope of this document is to describe the enhancements for the Webdav
component version 1.2.

The general goal for this version is to support locking as described in RFC
2518. To achieve this, the if-header must be parsed and respected by the Webdav
component. This currently is not the case. The if-header must also be used to
respect entity tags, which is not an integral part of the locking feature. However,
the support of entity tags is part of this design, too. 

The following issues are covered in this design:

- Webdav does not provide ETags and does not honor the if-header with them
  (#12583).
- Lock support (#12286).

Common concerns
^^^^^^^^^^^^^^^

This section introduces common concerns of the issues covered in this design
document and the features resulting from them. Especially the if-header and its
support in the Webdav component are described.

============
RFC Overview
============

In addition to the headers If-Match and If-None-Match, which are described in
the HTTP/1.1 RFC, RFC 2518 (WebDAV) describes the If-Header. The If header is
used to define conditional actions by the client, similar to the 2 headers
named before. However, it is constructed in a much more complex and weird way.

If header
=========

The If header is described with the following pseudo EBNF: ::

   If = "If" ":" ( 1*No-tag-list | 1*Tagged-list)
   No-tag-list = List
   Tagged-list = Resource 1*List
   Resource = Coded-URL
   List = "(" 1*(["Not"](State-token | "[" entity-tag "]")) ")"
   State-token = Coded-URL
   Coded-URL = "<" absoluteURI ">"

It may contain entity tags (see `Entity tag support`_), lock tokens (see `Lock
tokens`_) and combination of both. In addition the header may contain
additional resource URIs to affect not only the main request URI. Luckily, the
If header either containes a tagged list (including affected resource URIs) or
a no-tag list (without resource URIs). It cannot contain a combination of
those.

Both lists (tagged and no-tag) contain a not limmited number of lock tokens
and/or entity tags and maybe prefixed by the keyword "Not". This indicates that the
affected method may only be executed if the condition defined in the list does
not match. This works similar to the If-None-Match header, specified by the
HTTP/1.1 RFC.

To illustrate this complex definition some more, some examples are presented
and explained in following.

No-tag list
------------

::

   If: (<locktoken:a-write-lock-token> ["I am an ETag"]) (["I am another ETag"])

This If header consists of 2 no-tag lists (it does not contain any resource
URIs). The first list consists of a lock token and an entity tag, the second
only contains an entity tag. The semantics of this example is, that the method
containing this If header may only be executed if

- either the first combination of lock token and entity tag is matched
- or if the second entity tag is matched.

Note that the first list item describes a logical AND operation, while the
whole list concatenates its items by logical OR.

Tagged list
-----------

::

   COPY /resource1 HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/resource2
   If: <http://www.foo.bar/resource1> (<locktoken:a-write-lock-token>
   [W/"A weak ETag"]) (["strong ETag"])
   <http://www.bar.bar/random>(["another strong ETag"])

This example does not only show an If header with a tagged list, but also a
context where this could make some sense: The COPY method affects several
resources at once. It works at least on a source (the request URI) and a
destination (see Destination header), Additionally it can affect whole
sub-tress, using the Depth header.

The If header in this case affects 2 resources, while one of the defined
conditions will be checked and the other won't. The first list affects the
request URI and contains 2 elements concatenated with logical OR. The first
item consists of an AND-combination of a lock token and an entity tag. The
second only contains an entity tag. This is similar to the example shown above
for the no-tag list. Except that it contains the "tagging" URI. For the
second tag only an entity tag is listed. Anyway, this condition would not be
checked in the request but simply be ignored, since the resource in the tag is
not affected by the resource.

Not
---

::

   If: (Not <locktoken:write1> <locktoken:write2>)

This simple If header only shows the definition of a "Not" affected list. The
keyword must occur at the very begining of the affected list item. This item
contains 2 lock tokens combined with logical AND. In clear words the requested
affected by this If header will be executed if non of the affected resources is
locked by either of the specified lock tokens.

=========================
Plugin based design draft
=========================

This section tries to design the honoring of the If header in the Webdav
component using a plugin based approach for lock handling. This works
corresponding to the pluin approach described in `Plugin design draft`_.

It is not possibly to exctract all parts of locking support into the lock
plugin, since the If header must be parsed in one go. Since this can also
contain entity tags, which do belong into the main component, it cannot be
parsed exclusively in the lock plugin.

Transport layer
===============

The transport layer needs to parse the If header. Since the header can contain
entity tags and lock tokens, the parsing needs to take place inside
ezcWebdavHeaderHandler itself and cannot be part of the plugin. The If header
is the most complex header that needed to be parsed so far. All other parsed
headers either contained a string value or a simply to process other scalar
value. To encapsulate the If header correctly some new classes need to be
invented which are described in following:

::

    abstract class ezcWebdavIfHeaderList implements ArrayAccess
    {
        protected ezcWebdavIfHeaderListItems[] $items;
    }

    class ezcWebdavIfHeaderTaggedList extends ezcWebdavIfHeaderList
    {

    }

    class ezcWebdavIfHeaderNoTagList extends ezcWebdavIfHeaderList
    {

    }

These classes represent the lists provided in an If header. Both are accessed
through the ArrayAccess interface. The keys used to query the object are
resource pathes (not URIs!).

An ezcWebdavIfHeaderList object will return an array of
ezcWebdavIfHeaderListItem objects on read access through ArrayAccess. This
array represents the OR concatenation of the items. The item class realizes the
OR combination and is described further below.

The ezcWebdavIfHeaderTaggedList will return the list items defined for the resource
path given via ArrayAccess and only those for the given path (an empty array of
none were defined for this path. In contrast to that,
ezcWebdavIfHeaderNoTagList will return all list items for *every* resource
path, since the lists applies to all resources.

This way of abstracting tagged lists and no-tag lists allows a unified usage of
both classes in deeper layers of the Webdav component (plugin or backend).

::

    class ezcWebdavIfHeaderListItem
    {
        public function __construct(
            array $lockTokens = array(),
            array $eTags      = array(),
            bool $negated     = false
        );

        property-read array $lockTokens;
        property-read array $eTags;
        property-read bool  $negated;
    }

An instance of this class represents a list item, which can combines several
entity tags ($eTag) and lock tokens ($lockTokens). In addition it can be
defined to be negated ($negated === true). The combination represented by such
an object is a logical AND combination. 

Code examples
-------------

Some small code examples to illustrate the above class design will be showen
here.

::

   COPY /resource1 HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/resource2
   If: <http://www.foo.bar/resource1> (<locktoken:a-write-lock-token>
   [W/"A weak ETag"]) (["strong ETag"])
   <http://www.bar.bar/random>(["another strong ETag"])

This example shows a tagged list in the If header, which will be parsed into an
instance of ezcWebdavIfHeaderTaggedList will be created from it in the
`Transport layer`_. The access to this object in the backend or the lock plugin
will look as follows: ::

    $res1items = $ifHeader['/resource1'];

    $res2items = $ifHeader['/resource2'];

    $randomItems = $ifHeader['/random'];

The $res1items variable will contain an array reflecting the conditions
specified for http://www.foo.bar/resource1. The $res2items variable will
contain an empty array since no conditions were defined for this resource.
While the $randomItems variable should normally not be requested (since the
resource is not affected) it would contain the corresponding list items for the
http://www.bar.bar/random resource.

In contrast, the following reqeuest would return an instance of
ezcWebdavIfHeaderNoTagList for the contained If header: ::

   COPY /resource1 HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/resource2
   If: (<locktoken:a-write-lock-token> [W/"A weak ETag"]) (["strong ETag"])
   (["another strong ETag"])

Taking the same accesses to the corresponding $ifHeader variable as shown above
will result in all 3 variables containing the same values: All 3 list items
will be contained, since the If header does not use tagging to specify which
resources are affected by the conditions.

Plugin
======

If the lock plugin is active, it needs to hook into every affected request (see
`Affected base methods`_) and check the If header conditions. The check does
not only affect the checking of locktoken conditions, but also the check of
etag validation, because both condition types are combineable.

The procedure (in pseudo code) is as follows: ::

    lock backend;
    foreach ( <range of affected resources> as <basse resource> )
    {
        create propfind request for <base resource>;
        set request properties to <getetag> and <lockdiscovery>;
        set depth according to incoming request;
        send request to backend;
        foreach ( <resources in response> as <resource> )
        {
            if ( <resource> does not conform to If header )
            {
                return <precondition failed response>;
            }
        }
    }
    discard If header;
    unlock backend;

The If header needs to be discarded after correct validation of all entity
tag/lock token conditions. This avoids that the backend checks for the entity
tag conditions a second time.

.. Note::
   The checking of both (lock token and entity tag) conditions is necessary in
   this case, although it results in a small part of code-duplication.

.. Warning::
   The behaviour showen here does not conform to 100% with the WebDAV RFC,
   which states that the "If header is intended to have similar functionality
   to the If- Match header defined in section 14.25 of [RFC2068]". If this is
   taken literally, the lock plugin would need to check if a request would fail
   without the If header before checking the If header itself. This would
   result in unmanageable overhead and code duplication.

.. Warning::
   Actually the backend would have need to be locked completly, in case an If
   header occured and was succesfully checked by the lock plugin. This complete
   lock must be held until the corresponding response was created by the
   backend. Else there is a race condition in the time frame after the lock
   checking until the backend starts processing. This can lead to extremly
   strange results in high-load environments.

Backend layer
=============

The backend receives the parsed If header as described in the `Transport
layer`_ section through the $headers property of the request object. We cannot
enforce the honoring of the If header, so back ends do not neccessarily honor
them. However, it should be properly documented that this header exists and is
must be honored if shipped with a request.

If a backend takes care for the header, it may only use the $eTag and $negated
properties and must ignore the $lockTokens property. The latter one is used
exclusively in the lock plugin. In case the lock plugin is active, the back end
should never receive any If header. The If header will then be processed
exclusively by the lock plugin.

If the backend pays attention to the If header, it must honor it for every
request and every resource path that is accessed during execution of the
request. To include the checking of the If header into request processing the
following algorith must be used (pseudo-code): ::

    lock backend;
    if ( preconditions for request without If header are not fulfilled )
    {
        return <corresponding error response>;
    }
    foreach ( <affected resources> as <resource> )
    {
        if ( If header not fulfilled for <resource> )
        {
            return <precondition failed error response>;
        }
    }
    process request;
    unlock backend;
    return <corresponding response>;


The backend does not need to take care of If headers, if the lock plugin is
installed. In this case, the lock plugin will take over the complete check for
the If headers conditions and remove the header from the request object
afterwards.

Infrastructure
==============

The ezcWebdavRequest class does currently not support the removal of headers as
required by the lock plugin. A method ::
    
    public removeHeader( $headerName )

needs therefore to be added. This method also needs to invalidate the headers
internally in the class, so that a manual revalidation using validateHeaders()
needs to occur. Since the lock plugin will remove the If header before the
request object passes ezcWebdavServer, the headers are validated anyways there.


Entity tag support
^^^^^^^^^^^^^^^^^^

This section describes the support of entity tags in the Webdav component, including
the usage of the if-header with entity tags and the generation and sending of the
ETag header.

============
RFC Overview
============

Entity tags are generally used in the HTTP/1.1 protocol to provide a mechanism
of validating that a resource is in the same state. Whenever the state of a
resource changes, its entity tag needs to change. In following, the definition
of the HTTP/1.1 validation mechanisms in general, the definition of an entity
tag and the definition of the ETag-header are described. In addition the usage
of entity tags in the Webdav RFC is described.

Entity Tags
===========

Section 3.11 of the HTTP/1.1 RFC describes entity tags. These strings identify
(tag) the state of a resource, named "entities" in the RFC. The entity tag
consists of a quoted string and an optional weakness modifier. The quoted
string must be unique for each state. ::

      entity-tag = [ weak ] opaque-tag
      weak       = "W/"
      opaque-tag = quoted-string

A non-weak entity tag must identify a certain state uniquely. With the added W/
prefix, one and the same tag may identify different states of a resource that
are semantically equivalent.

Entity tags are used in HTTP/1.1 in combination with the following headers:

- Request
  - If-Match
  - If-None-Match
  - If-Range
-Response
  - ETag

Since the Webdav component will generate the entity tag, we should ensure to
only generate strong entity tags.

Headers
=======

The following section describes the headers that are affected by entity tags
and how the server should respect them.

If-Match
--------

The If-Match header is generally used to make the method it is send with
conditional. Only if the conditions defined by the header are met, the action
associated with the method should be performed by the server.

The header format is defined as follows (14.24): ::

       If-Match = "If-Match" ":" ( "*" | 1#entity-tag )

The If-Match header in general assumes that the affected resource exists, if it
does not, the request must fail since no entity is there to compare the given
criteria too (no entity exists). The header either specifies "*", to indicate
that an entity must exist, whichever that is. Alternatively any number of
entity tags can be given, divided by ",". If one of the given tags match the
current state of the resource, the method is performed as if not If-Match
header was given. Else the method must fail with 412 (Precondition failed).

In case the request would have failed anyway (not result in a 2xx or 412
status), the If-Match condition is not even checked, but the error response
generated by the request is returned. The reaction of a server to a combination
of multiple If-* headers is undefined.

.. Note::
   We should just throw all If-* headers away if a combination of the occurs,
   so the back-end does not need to deal with it.

Examples: ::

       If-Match: "xyzzy"
       If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
       If-Match: *

If-None-Match
-------------

This header behaves similar to the If-Match header, except that the operation
is only performed if none of the submitted entity tags matches. In case the
operation is a GET or a HEAD operation and one of the tags matched, the server
should return a 304 (Not Modified) code, in all other cases a 412 (Precondition
Failed) must be returned.

The header is defined like this: ::

       If-None-Match = "If-None-Match" ":" ( "*" | 1#entity-tag )

The '*' again means that any entity tag exists (as for If-Match). In case of
the If-None-Match header, the operation will be executed only of no entity of
the resource exists. In fact this means that the resource does not exist.

Examples: ::

       If-None-Match: "xyzzy"
       If-None-Match: W/"xyzzy"
       If-None-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
       If-None-Match: W/"xyzzy", W/"r2d2xxxx", W/"c3piozzzz"
       If-None-Match: *

If-Range
--------

The If-Range header does only make sense to be respected, if the server supports
partial GET requests and resuming of such. Since the Webdav component does not
support this, yet, the header will be ignored.

.. Note::
   If we support partial GET sometimes, support for this header must be
   considered, too.

ETag
----

The ETag header is send by a server to give the client an entity-tag for the
current resource that he can use later with any of the headers described above.
The ETag header is therefore a response header, while the headers described
above are request headers.

The ETag header is build up like this: ::
      
      ETag = "ETag" ":" entity-tag

Examples::

      ETag: "xyzzy"
      ETag: W/"xyzzy"
      ETag: ""

.. Attention::
   The following is an assumption that should be verified somehow. It seems that
   the ETag header is only defined for a single resource, which indicates that
   responses that affect multiple resources should not contain it.  For Webdav
   this includes several methods like COPY and MOVE, but also PROPFIND with a
   Depth header other than 0.

Validation
==========

The purpose of entity tags is to ensure, that a certain operation is only
performed, if a resource resides in a certain state. This state is defined by
an entity tag. Most likely, this applies to the GET operation in combination
with caching for pure HTTP/1.1. However, in combination with the WebDAV
extension, validation of entity tags might also be necessary for operations
like PUT and others.

The HTTP/1.1 RFC defines 2 different validator schemes: Strong and weak
validators. Entity tags are generally considered strong validators, since they
should change as soon as the affected resource changes its state. However, the
protocol provides a way to declare entity tags to be weak validators, as
described in the ETag header above.

.. Note::
   We should not make use of this way of "weaking" entity tags, but always provide
   the strong method.

Caches (like proxy servers and browser caches) use additional methods to
validate their content. The most common way here is to use the Last-Modified
header in addition, which indicates the last modification time of the resource.


-- Note::
   We need to decide if we should support this validator in addition. This
   would also involve more headers to react on, like If-Modified-Since. This is
   not mandatory.

======
Design
======

The following design only refers to the support of entity tags as defined in
the HTTP/1.1 RFC. This includes the headers mentioned in the above RFC overview
and the generation and comparison of entity tags.

Entity tag generation
=====================

The generation of an entity tag requires uniqueness for the state of a resource
(the so-called entity), To achieve this, multiple data of the resource and be
involved and combined.

The last modification time in combination with the file size should be a
sufficient combination of data to generate an entity tag from. The Lighttpd
web server uses this information on a configurable basis, too. In addition it
can use the inode of the file for entity tag generation. Since inodes are
operating system dependent and only available for file system based back ends,
they will not be used in our entity tag generation scheme.

Since entity tags in WebDAV are also available through the getetag
live-property, a common way is needed to generate the entity tags for the
headers and the property. The ezcWebdavSimpleBackend will therefore request the
getetag property from the extending back end and use it's value for the headers
and validation.

The current generation of entity tags in ezcWebdavFileBackend will be replaced
by a mechanism that uses the last modification time and the size of the file.
It currently uses the path, which is not reliable and does not belong into the
entity tag. Entity tags are only valid for a single resource and only in
combination with its URI.

Header handling
===============

The handling of entity tag related headers must take place in several different
architecture levels of the Webdav component.

Transport layer
---------------

The transport layer needs to be able to parse the request headers and to
serialize the response headers back. Therefore the ezcWebdavHeaderHandler class
will be adjusted.

The class must parse the following new request headers:

- If-Match
- If-None-Match

ezcWebdavHeaderHandler will check if both of these headers are set. If this is
the case, both headers will be silently discarded, since such a combination is
undefined.

Both headers can contain a list of weak/non-weak entity tags or the "*" value,
to indicate that the resource must just exists, no matter in which state. To
represent this in PHP, the parsed headers will be represented either as an
array of string values or as the boolean value true. The headers will be parsed
into every request object automatically, if they are set.

The back end layer must take responsibility for interpreting the headers and
their values.

In addition, ezcWebdavHeaderHandler must take care of serializing an ETag
header, if this one is present in a response object. Since the ETag header may
only contain the string value of an entity tag, this mechanism is already
implemented in the response processing.

Back end layer
--------------

The interpretation of incoming If-Match and If-None-Match headers must be done
in the back end. The implementation will take place in the
ezcWebdavSimpleBackend class. With every incoming request, no matter which
request method is used, the If-Match and If-None-Match headers will be honored
in the following way:

If the back end determines that an If-Match header is set, it will:

- Check if all preconditions (except the If-Match) are fulfilled.
  - If not, return a corresponding error response.
- Check if the If-Match value is a boolean true.
  - Check if the requested path exists.
    - If it *does not*, cancel the method and return 412 (Precondition Failed).
- Check if the If-Match value is an array of strings.
  - Retrieve the affected resources getetag property and compare it with all
    strings in the array.
    - If *none* matches, cancel the method and return 412 (Precondition Failed).
- Process the method as if the If-Match header was not set.

If the back end determines that an If-None-Match header is set, it will:

- Check if all preconditions (except the If-Match) are fulfilled.
  - If not, return a corresponding error response.
- Check if the If-Match value is a boolean true.
  - Check if the requested path exists.
    - If it *does*, cancel the method and return 412 (Precondition Failed).
- Check if the If-Match value is an array of strings.
  - Retrieve the affected resources getetag property and compare it with all
    strings in the array.
    - If *any* matches, cancel the method and return 412 (Precondition Failed).
- Process the method as if the If-None-Match header was not set.

Since this behavior will be implemented within the ezcWebdavSimpleBackend
class, it automatically works with all extending back end classes. Back ends
that do not extend ezcWebdavSimpleBackend will have to take care for these
headers on their own.

Lock support
^^^^^^^^^^^^

Locking allows a WebDAV client to gain exclusive access to a resource
(collection or non-collection) to avoid the "lost update problem". This means
that a client can define to have exclusive access to a resource for a certain
time, where no other client may gain access to this resource.

The WebDAV RFC distinguishes locks by 2 essential properties: The scope of the
lock (shared vs. exclusive) and the type of the lock (write vs. read), while
for the type only a write lock is specified. Using an exclusive lock the client
ensures that he has absolutely exclusive access to the locked resource. With a
shared lock it is possible the multiple clients take part in one and the same
lock. More information on lock scopes are provided later.

============
RFC overview
============

This section tries to summarize the important facts about locking mentioned in
RFC 2518 in various places, enhanced by first pre-considerations of design and
implementation issues associated with them.

Lock types
==========

The WebDAV RFC distinguishes between read and write locks, while only write
locks are defined in detail. The RFC explains, that "the syntax is extensible,
and permits the eventual specification of locking for other access types".

A write lock determines that the locking principle may exclusively write to the
affected resources. Reading is possibly for every other client, too. If a
client that does not hold a specific lock tries to perform a writing operation
to a resource which is locked by another client, this operation must fail.

Lock scopes
===========

The WebDAV RFC specifies 2 different scopes for locking:

- Exclusive
- Shared

For an exclusive lock exactly 1 client may hold a lock on a specific resource
and only this client is allowed to perform the affected operations on the
locked resource. For a shared lock it is possible that multiple clients take
part in the lock (group editing). Every client that takes part in a shared lock
may perform the affected operations on the locked resource.

WebDAV does not provide any channel to allow communication between the clients
involved into a shared lock. The communication of these clients must be handled
externally.

Lock tokens
===========

A lock token identifies a specific lock uniquely across all resources for all
times. Whenever a successful LOCK request was processed, it returns the
specific lock token for this lock. The lock token associates the locking client
with the locked resource. Therefore multiple lock tokens might be assigned to a
single resource, if the lock is a shared lock.

A lock token must be unique throughout all resources for all times. The WebDAV
RFC therefore defines a lock token scheme, which can optionally be used by the
server. The so called "opaquelocktoekn" scheme makes use of UUID_, as defined
in `ISO-11578`_. A `PECL package for UUIDs`_ is available.

.. _`UUID`: http://en.wikipedia.org/wiki/UUID
.. _`ISO-11578`: http://www.iso.ch/cate/d2229.html
.. _`PECL package for UUIDs`: http://pecl.php.net/package/uuid

Since the opaquelocktoken scheme is not mandatory, the code snippet ::

    $token = md5( uniqid( rand(), true ) ); 

could be used as an alternative to provide the necessary amount of uniqueness. 
To create a lock token that, a this way generated ID could be appended to the
URI of the affected resource to provide transparency of the source of a lock
token. For example: http://webdav/foo/bar.txt#<id>.

Every client that can access the WebDAV server has access to lock tokens
through the LOCKDISCOVERY request method, so the lock must be bound to a
different authentication mechanism. An owner string is submitted with the LOCK
request, which might help here.

Affected requests
=================

Locks affect several request, beside the explicitly lock related requests. The
following 2 sections summarize the affected request methods and give a short
overview about how these are affected.

Dedicated methods
-----------------

LOCK
  The LOCK method is used to initially establish a lock and to refresh locks.

UNLOCK
  The UNLOCK method is used to release a specific lock before it times out
  automatically.

Affected base methods
---------------------

The following methods may only be performed on a locked resource if the
performing client owns the specific lock.

- PUT
- POST
- PROPPATCH
- MOVE
- DELETE
- MKCOL

In addition the PROPFIND request is affected by lock support, since lock
information is visible to every client through the LOCKDISCOVERY and
SUPPORTEDLOCK properties.

Locking resources
=================

Both types of resources (non-collection and collection resources) can be
locked. This section describes differences for both types and other points
directly related to locking resources.

Non-collection resources
------------------------

A non collection resource can be affected directly or indirectly by a lock. In
the first case a client has issued a LOCK request explicitly for this resource,
only locking this single resource. The second case occurs, if a client locked a
collection resource and the non-collection resource is a direct or in-direct
descendant of it. For detailed information on this topic see the next section
about locking if collection resources.

Collections
-----------

The LOCK request allows the 'Depth' header to be set to specify the depth of
the created lock. A depth value of ZERO means, that only the affected
collection itself is locked. This might be sensible to add new resources to
this collection. The depth value INFINITY means that the created lock
recursively affects all descendants of the collection. This way it is possible
to lock a complete sub-tree of the WebDAV repository.

Any lock (no matter which depth) on a collection prevents the addition and
removal of direct members of this collection by non-lock-owners. This affects
the following methods:

- PUT
- POST
- MKCOL
- DELETE

If a collection should be locked and any of its members is already locked, this
conflicts with the lock to be set and must result in an 423 error (Locked).
Members that are newly created inside a locked collection or copied/moved to
it are automatically included to the lock. This affects infinity-depth locks as
well as zero-depth ones for direct children of the locked collection.

Lock null resources
-------------------

A write lock might be acquired to a resource that does not (yet) exist. This
is called a "lock null resource". A lock null resource only supports the
methods:

- PUT
- MKCOL
- OPTIONS
- PROPFIND
- LOCK
- UNLOCK

All other methods must return 404 (Not found) or 405 (Method not allowed).

The properties of a null resource are mostly empty, except there must be
LOCKDISCOVERY and SUPPORTEDLOCK properties. If PUT or MKCOL are issued, a null
resource becomes a normal one. The RFC does not state if the lock stays on this
newly created (real) resource or if it is removed.

COPY/MOVE
---------

Both methods destroy locks. If a resource is moved to a locked collection, it
is automatically added to the lock (same client assumed). Both will not work,
if the destination is locked but no lock is owned by the client.

Refresh
=======

A LOCK request must not occur twice. To refresh a lock, clients send a LOCK
request with empty body and an If header that specifies the lock tokens to
refresh locks for. If this occurs, the timers of the lock must be reset. A
Timeout header might be send by the client, but the server may safely ignore
these and simply perform a refresh as it desires.

===================
Plugin design draft
===================

This section describes a potential realization of locking through a plugin for
the Webdav component. This plugin will make use of the, not yet officially
released, plugin API.

Design goals
============

This design drafts goal is to build a lock plugin that is almost completely
independent from the used back end. In this sense, the requirements to be
fulfilled by a back end must be cut down as far as possible. Beside that, the
plugin should provide the largest possible compatibility to clients. However a
plugin that hooks into the parsing process cannot provide the same client
compatibility mechanisms as the base Webdav transport layer.

Hooks
=====

The plugin needs to assign to several hooks offered by the plugin API, which
will be described roughly in this section.

parseUnknownRequest (ezcWebdavTransport)
----------------------------------------

The requests LOCK and UNLOCK are dedicated to the locking mechanism. Therefore
the plugin needs to hook into parseUnknownRequest and parse the incoming
requests into (new) corresponding request objects.



===========
Open issues
===========

Authentication
==============

The problem
-----------

The WebDAV RFC specifies that lock tokens are not secure for authentication
since the can be obtained by every client with access to the repository through
the lockdiscovery property. Therefore, a server must provide its own
authentication scheme. We currently do not support any authentication mechanism
in the Webdav component. To realize locking, we need to support at least 1
authentication model in the component.

Solution attempt
----------------

The only possible authentication scheme provided through the HTTP protocol is
HTTP-Auth. Therefore the HTTP-Auth information should be integrated into every
request object, if provided. To check this information, an interface should be
provided that provides the following capabilities:

- Information of the assignment of a new lock token to a specific HTTP-Auth
  user.
- Removal of a lock token.
- Answer to the question if a certain user may perform an action with a given
  lock token.

In addition we should provide a basic implementation of this class, which does
actually not do anything but discard the given information and return true on
authentication question. This will not provide any security, but allow users to
plug their own authentication mechanisms into the lock facilities.

Further thoughts
----------------

In future it might be possibly that a WebdavAuthenticationTiein is implemented,
which might then be plugged into the described mechanism, too. This could in
addition be used for a "plugin" that performs authentication (and possibly
authorization?) in general on the transport/server level.

Lock null resources
===================

The problem
------------

For our special case this means, that we need to "physically" create
lock-null resources in the utilized back end, to make it persist during
requests, whenever a null-lock is acquired. This lock-null resource must
not appear as a real resource to the client (e.g. must not have a
correct content type and must not respond to GET requests). If the
resource is unlocked again, it must be removed from the back end again.

In our internal handling, that means, that we need to intervene any of
the operations not supported by a lock-null resource (e.g. COPY, MOVE,
PROPPATCH) requests to check is a lock-null resource is affected and
remove it potentially or forbid the operation. Furthermore, we need to
intervene any operation that is supported by a lock-null resource to
remove potential information from responses that must not be available
for lock-null resources. This will mean a lot of internally generated
requests to the back end and a lot of processing of the back end generated
responses.

For example, if a MOVE request is issued by a client, we need to check
the whole affected directory tree for lock-null resources and remove
those from the destination and send a special error code for them in the
response.

Atomicity of operations also comes into play here, since our internal
requests to the back end might interfere with other external requests. For
example, a null-lock might be acquired by the client while we are
internally checking the correctness of a MOVE request (race-condition).

Solution attempts
-----------------

I currently do not see a full solution for this problem, still there are
some ideas in my mind, that might be helpful. For lock-null resources we
can invent a special dead-property name space to indicate such resources.
If a special (for lock-null resources forbidden) operation occurs, we
can easily check for them using a PROPFIND request. Creating and
maintaining lock-null resources should then be not problem.

For the race-condition issue, we'll definitely need support in the
back end, because I see no other solution attempt here to ensure the
consistency.


..
   Local Variables:
   mode: rst
   fill-column: 79
   End: 
   vim: et syn=rst tw=79
