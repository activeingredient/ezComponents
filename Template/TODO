$manager = new ezcTemplateManager( "


Documentation
-------------
- Set the private classes to '@access private'.


Source to TST (+ TST nodes)
---------------------------
- Clean up expressionBlock->rootExpression.
- break, continue, etc. implemented?
- The "Available block types are: ..." are incorrect.
- Implement cycles. Incl. increment, decrement, reset.
- ArrayAppend {$a[] = 5}, needs to be fixed.
- Check function names while parsing.
- Implement the required version number.: 1.0
- check delimiters: {rdelim, ldelim}
- Implement include + return.
- Implement / check custom blocks.

- Remove the condition property from the ezcTemplateIfConditionTstNode.
- Test the function array_remove_last(), array_remove_first()

- Manger should have 'send', 'receive' names.
- Fix error message exceptions.
- References, are not implemented but used. 
- Implement typehints for the functions.


TST to AST (+ AST nodes)
------------------------



AST to PHP (+ PHP code )
------------------------





Amos' old list:
---------------

- Create meta-code class which are elements which wrap around real code elements, it has a method to fetch the first real element from its children.
  this allows optimizer and other code which inspects the code tree to go past these elements.
  typical meta-code are:
  - changing run-time options such indentation, spacing, hanging braces etc.
  - inlining code
- add these AST nodes (only if needed for the 1.0 release):
  * docblock comment
    /**
      */
  * rest of operators
    + clone
    + new
    + ternary ?:
    + @
    + execution ``
  * casts
  * reference
  * open tag/close tag
  * class
  * function
  * static
  * interface
  * abstract class


- Operator names need to be consistant, ie. either addition and multiplication or plus and multiply.
- Move whitespace removal to root parser while it opens/closes blocks.
- Add support for all operators + operands to return a typehint, this can be used to detect type parse-time and to provide type-hints to the transformed code.
- Rename ezcParser to ezcParserControl and all references of 'main parser' to 'parser control'.

- Added syntax validator class which is invoked when new type, operator and block elements are made.
  * Check for assignment usage inside an expression, not allowed.
  * Check for typical mistakes when coming from PHP.
    o Check for isset()
  * Check for identifiers which are reserved keywords (by template or PHP):
    o true, false, and, or
- Operators:
  * The ! operator needs special attention when used together with other operators,
    see PHP manual for this.
    !$obj instanceof SomeClass
- Uncomment all typehints.
- Move nesting check to block class, each block sub-class should be able to override it to allow
  more complex nesting rules. e.g. {section} {section-else} {/section}
- Start cursor for block are 1 off.

- Move abstract classes to abstract/ subdir?
- Make sure cursor class handles tab characters
- Don't expose all variables in element types, instead use methods or magic-properties.

- trimBlockLine(s) might not need the $parentBlock parameter.
- whitespace trimming object needs to be fetched from the current output context in main parser.

CS:
- Fix all @param with long texts to use the alternative syntax
- Fix @returns -> @return
- Fix @inheritdocs for re-implemented functions (if it works).
- Fix class descriptions with examples.
- Make sure @param blocks are properly aligned

compiler:
- There should be an 'object' style file generated with information about a template, e.g. related templates
  and other files.
