<?php
/**
 * File containing the ezcTemplateConfiguration class
 *
 * @package Template
 * @version //autogen//
 * @copyright Copyright (C) 2005, 2006 eZ systems as. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 */
/**
 * Contains the common configuration options for template managers.
 *
 * When the configuration is first initialized it will only contain loaders for
 * the builtin functions, blocks and resource handler. If more are wanted they
 * must be registered with the registerAutoloader() function.
 * <code>
 * $conf->registerAutoloader( new ezcTemplateAutoloaderDefinition(
 * "path/to/loader.php", "TestLoader" ) );
 * </code>
 *
 * The currently registered list can be accessed with getRegisteredAutoloaders()
 * and initializing all of them is possible with setRegisteredAutoloaders().
 *
 * The resource locators are also maintained by the configuration, they are used
 * to figure out the real location of a template based from a resource string. To
 * register a new locator use the registerResourceLocator() method, it needs an
 * object which implements the interface ezcTemplateResourceLocator. Accessing
 * registered locators are done with getRegisteredResourceLocator() or accessing
 * the $resourceLocators member variable directly.
 *
 * To get a unique instance of a configuration use the getInstance() static
 * function, it will return an instance for the given name. Setting a new
 * instance can be done with setInstance().
 *
 * Whenever a template source or compiled code is accessed it will use the
 * $templatePath and $compilePath respectively as the base path. The full path
 * is generated by using the value of theses variables and then appending a slash
 * (/) and the subpath, this means it is possible to  have the templates in the
 * root of the filesystem by setting an empty string or a string starting with a
 * slash. For instance:
 * <code>
 * // accessing templates in /usr/share and compile them in /var/cache
 * $conf->templatePath = "/usr/share/eztemplate";
 * $conf->compilePath = "/var/cache/eztemplate";
 * </code>
 *
 * Accessing templates from the applications directory is done with a single dot
 * (.), this is also the default values.
 * <code>
 * // uses current directory for accessing templates and compiling them
 * $conf->templatePath = ".";
 * $conf->compilePath = ".";
 * </code>
 *
 * @package Template
 * @copyright Copyright (C) 2005, 2006 eZ systems as. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 * @version //autogen//
 */
class ezcTemplateConfiguration
{

    /**
     * An array of ezcTemplateAutoload objects which are used to load template
     * elements such as functions and blocks.
     *
     * @note If it contains false the system will initialize the loaders from the
     * $autoloadDefinitions variable.
     * @var array
     * @note __get property
     */
    // private $autoloadList = false;

    /**
     * An array of ezcTemplateAutoloaderDefinition objects which are used to define
     * where the autoload classes can be found.
     *
     * This array contains the minium information needed when the template system is
     * first initialised, the rest of the autoloader classes are only loaded when
     * actually needed.
     *
     * @note Use registerAutoloader() or setRegisteredAutoloaders to modify this
     * variable.
     *
     * @var array
     * @note __get/__set property
     */
    // private $autoloadDefinitions;

    /**
     * Registered resource locator (ezcTemplateResourceLocato) in the manager. They
     * are used to find source and compiled code.
     * @var array
     * @note __get/__set property
     */
    // public $resourceLocators;

    /**
     * The base path for all the source templates. e.g. 'design' or 'templates'
     * @var string
     */
    //public $templatePath = ".";

    /**
     * The base path for all the compiled templates. e.g. 'var/template/compiled'
     * @var string
     */
    //public $compilePath = ".";

    /**
     * List of global instances, looked up using the identifier string.
     */
    static private $instanceList = array();

    /**
     * An array containing the properties of this object.
     * autoloadList - An array of ezcTemplateAutoload objects which are used to load
     * template elements such as functions and blocks.
     *
     * autoloadDefinitions - An array of ezcTemplateAutoloaderDefinition objects
     * which are used to define where the autoload classes can be found.
     *
     * resourceLocators - Registered resource locator (ezcTemplateResourceLocato) in
     * the manager. They are used to find source and compiled code.
     */
     private $properties = array( 'context' => false,
                                  'templatePath' => ".",
                                  'compilePath' => ".",
                                  'checkModifiedTemplates' => true,
                              );


    /**
     * Property get
     */
    public function __get( $name )
    {
        switch( $name )
        {
            case 'context': 
            case 'templatePath': 
            case 'compilePath': 
            case 'checkModifiedTemplates':
                return $this->properties[$name];

            default:
                throw new ezcBasePropertyNotFoundException( $name );
        }
    }

    /**
     * Property set
     */
    public function __set( $name, $value )
    {
        switch( $name )
        {
            case 'context': 
                if( !$value instanceof ezcTemplateContext )
                {
                    throw new ezcBaseValueException( $name, $value, 'ezcTemplateContext' );
                }
                $this->properties[$name] = $value;
                break;

            case 'templatePath': 
            case 'compilePath': 
            case 'checkModifiedTemplates': 
                $this->properties[$name] = $value;
                break;

            default:
                throw new ezcBasePropertyNotFoundException( $name );
        }
    }

    /**
     * Property isset
     */
    public function __isset( $name )
    {
        switch( $name )
        {
            case 'context': 
                return true;

            case 'templatePath': 
            case 'compilePath':
            case 'checkModifiedTemplates':
                return isset( $this->properties[$name] );

            default:
                return false;
        }
    }

    /**
     * Initialises the configuration with default template and compiled path.
     *
     * @param string $templatePath The default template path, all requested templates
     * are search from here. Use an empty string to fetch templates from the root of
     * the filesystem.
     * @param string $compilePath The default template path, all compiled templates
     * are placed here using subfolders. Use an empty string to compile templates at
     * the root of the filesystem.
     */
    public function __construct( $templatePath = ".", $compilePath = "." )
    {
        $this->properties["templatePath"] = $templatePath;
        $this->properties["compilePath"] = $compilePath;

        $this->properties['context'] = new ezcTemplateXhtmlContext();
    }

    /**
     * Returns the unique configuration instance named $name.
     *
     * @param string $name The name of the instance to fetch.
     * @return ezcTemplateConfiguration
     */
    public static function getInstance( $name = "default" )
    {
        if ( !isset( self::$instanceList[$name] ) )
        {
            self::$instanceList[$name] = new ezcTemplateConfiguration();
        }

        return self::$instanceList[$name];
    }

    /**
     * Sets the unique configuration instance with name $name.
     *
     * @param string $name The name of the instance to set.
     * @param ezcTemplateConfiguration $configuration The configuration option to use
     * as unique instance.
     */
//    public static function setInstance( $name = "default", ezcTemplateConfiguration $configuration )
//    {
//    }

}
?>
