
EBNF
====

Program
-------

The template language starts with the non-terminal token: "Program".

::

  Program             ::= Version NewLine Text EOF

  Version             ::= '{?' 'ezt' 'version' '=' '"' FloatLiteral '"' '}'

  Text                ::= ( Graphic | Block )*

  Block               ::= CommentBlock 
                      |   DeclarationBlock
                      |   AssignmentBlock
                      |   OutputBlock
                      |   LiteralBlock
                      |   CycleBlock
                      |   {ldelim}
                      |   {rdelim} 
                      |   LoopBlock
                      |   CodeFlowBlock
                      |   CustomBlock

Blocks
------
::

  CommentBlock        ::= '{*' Graphic* '*}'

  DeclarationBlock    ::= '{' 'var' SubDefineBlock '}'
                      |   '{' 'cycle' SubDefineBlock '}' 
                      |   '{' 'use' SubDefineBlock '}'

  SubDefineBlock      ::= PrimaryVariable ( '=' Expression )? ( ',' SubDefineBlock )?

  AssignmentBlock     ::= '{' SubAssignBlock '}'

  SubAssignBlock      ::= PrimaryVariable ( '=' | CombinedAssignment) Expression (',' SubAssignBlock)?

  OutputBlock         ::= '{' Expression '}'

  LiteralBlock        ::= '{' 'literal' '}' Text '{' '/literal' '}'

  CycleBlock       ::= '{' 'increment' PrimaryVariable '}'
                      |   '{' 'decrement' PrimaryVariable '}'
                      |   '{' 'reset' PrimaryVariable '}'


Loop control
------------
::

  LoopBlock           ::= ForeachStatement
                      |   WhileStatement

  ForeachStatement    ::= '{' 'foreach' Expression 'as' PrimaryVariable ('=>' PrimaryVariable)? (Cycle)* (OffsetAndLimit)? '}' Text '{' '/foreach' '}'

  WhileStatement      ::= '{' 'while' Expression '}' Text '{' '/while' '}'

  Cycle               ::= ('increment' | 'decrement') PrimaryVariable (',' PrimaryVariable)* 

  OffsetAndLimit      ::= ('offset' Expression)? ('limit' Expression)?


Code flow control
-----------------
::

  CodeFlowBlock       ::= IfStatement
                      |   SwitchStatement
                      |   IncludeStatement
                      |   DelimiterStatement
                      |   '{break}'
                      |   '{skip}'
                      |   '{continue}'
                      |   ReturnStatement


  IfStatement         ::= '{' 'if' Expression '}' Text (ElseIf)* (Else)? '{' '/if' '}' 
  ElseIf              ::= '{' 'elseif' Expression '}' Text
  Else                ::= '{' 'else' '}' Text 

  SwitchStatement     ::= '{' 'switch' Expression '}' (Case)* (DefaultCase)? '{' '/switch' '}'

  Case                ::= '{' 'case' Literal ( ',' Literal)* '}' Text '{' '/case' '}'

  DefaultCase         ::= '{' 'default' '}' Text '{' '/default' '}'
                     
  IncludeStatement    ::= '{' 'include' Expression ('send' ExprAsPrimVarList)? ('receive' PrimVarAsPrimVarList)? '}'

  DelimiterStatement  ::= '{' 'delimiter' (modulo Expression ('is' Expression)? )? '}' Text '{' '/delimiter' '}'

  ReturnStatement     ::= '{' 'return' ExprAsPrimVarList '}' 

  ExprAsPrimVarList   ::=  ( Expression 'as' PrimaryVariable | PrimaryVariable ) (',' ExprAsPrimVarList)?

  PrimVarAsPrimVarList::=  PrimaryVariable ('as' PrimaryVariable)? (',' PrimVarAsPrimVarList)?


Custom block
------------
::

  CustomBlock         ::= '{' Identifier ( Expression )? ( CustomArgument )*  '}' (Text '{' '/'Identifier '}')?  

  CustomArgument      ::= Identifier ( ('=')? Expression)? 


Expression
----------
::

  Expression          ::= PreUnaryExpression (BinaryOperator Expression)?

  PreUnaryExpression  ::= '++' PrimaryVariable
                      |   '--' PrimaryVariable
                      |   UnaryExpression
                      |   Expression 'instanceof' Identifier 
                      |   ArrayDeclaration

  ArrayDeclaration    ::= 'array' '(' ( (Expression '=>')? Expression ( ',' Expression )* (',')? )? ')'
                      |   Expression '..' Expression


  UnaryExpression     ::= ( UnaryOperator )* PostFixExpression

  PostFixExpression   ::= PrimaryVariable ( '++' | '--' )?
                      |   Literal
                      |   FunctionCall
                      |   '(' Expression ')'


  PrimaryVariable     ::= '$' Identifier ( '[' Expression ']' | '->' Expression )*

  FunctionCall        ::= Identifier '(' (ParameterList)? ')'  
                                                                  
  ParameterList       ::= Expression ( ',' Expression )* 

  Identifier          ::= Letter ( Letter | Digit | '_' )*


Basic literals
--------------
::

  Literal              ::= NumeralLiteral 
                       |   StringLiteral 
                       |   BooleanLiteral

  NumeralLiteral       ::=  HexLiteral | OctLiteral | FloatLiteral

  HexLiteral           ::= '0x' HexDigit+

  OctLiteral           ::= '0' OctDigit+

  FloatLiteral         ::= NonZeroDigit Digit* ( '.' Digit+ )? (('e'|'E') ('+'|'-')? Digit+)?

  StringLiteral        ::= '"' Graphic* '"' 
                       |   "'" Graphic* "'"

  BooleanLiteral       ::= true 
                       |   false 


Lexicon
-------
::

  Comment             ::= '//' Graphic* ( EOL | '}' )
                      |   '/*' Graphic* '*/'

  Graphic             ::= Digit | Letter | Blank | Operators | Assignment | CombinedAssignment | RemainingCharSet

  EOL                 ::= end-of-line

  EOF                 ::= end-of-file

  Blank               ::= Tab | Space 

  NewLine             ::= '\n'

  Space               ::= ' '

  Tab                 ::= '\t'

  Letter              ::= 'a' ... 'z' | 'A' ... 'Z'  

  Hexdigit            ::= '0' .. '9' | 'A' .. 'F'

  Octdigit            ::= '0' .. '8'

  NonZeroDigit        ::= '1' .. '9' 

  Digit               ::= '0' | NonZeroDigit

  Assignment          ::= '='

  CombinedAssignment  ::= '+=' | '-='  | '*=' | '/=' | '%=' | '.=' 

  Operators           ::= BinaryOperator | UnaryOperator | '++' | '--'

  BinaryOperator      ::= ArithmeticOperator | ComparisonOperator | BooleanOperator | StringOperator

  ArithmeticOperator  ::= '+'  | '-'   | '*' | '/' | '%' 

  ComparisonOperator  ::= '==' | '===' | '!=' | '!==' | '<' | '<=' | '>' | '>=' 

  BooleanOperator     ::= '&&' | '||'

  StringOperator      ::= '.'  | '.='

  UnaryOperator       ::= '+'  | '-'   | '!'

  RemainingCharSet    ::= '.' | ':' | ';' | ',' | '~' | '(' | ')' | '[' | ']' | '{' | '}' | '_' | '|' | "'" | '"' | '`' | '#' | '$' | '@'




Examples
========

Text
----

Normal text output
^^^^^^^^^^^^^^^^^^

The next example writes "hello world"::

  {?ezt version="1.0" }

  Hello world


Using ldelim and rdelim
^^^^^^^^^^^^^^^^^^^^^^^

Template::

  {?ezt version="1.0" }
  
  {ldelim}?ezt version="1.0"{rdelim}

writes {?ezt version="1.0"} to the output.


Comments
--------

Block comments
^^^^^^^^^^^^^^
The following template::

  {?ezt version="1.0"}

  {* Hello *} world

will only output "world".
  

Inline comments
^^^^^^^^^^^^^^^
::

  { // Hello } world
  { // Hello 
  } earth

outputs::

  world
  earth
  

c-comment
^^^^^^^^^
::

  { /* Hello */ "world" }

outputs::

  world


