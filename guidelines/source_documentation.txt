Source documentation standards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This document explains how PHP source and source files should be documented in 
order to meet the required standards for documentation.

All PHP source should be documented using phpDocumentor syntax. The rest of
this document is concerned with:
- Source that is required to be documented.
- The tags that are required to be used in the various contexts.
- Optional documentation
- Wording rules

File  documentation
=====================
Required in all source files without a class. Should never be used in a source
file that contains a class.

The following fields are required:

- a short (one line) description of the file
- @version
- @package
- @copyright
- @license

The following fields are optional:

- a longer descripion of the file if the short description does not suffice


Example: ::

   /**
   * Short description of the contents of the file.
   *
   * @version //autogen//
   * @package PackageName
   * @copyright Copyright (C) 2005 eZ systems as. All rights reserved.
   * @license LGPL {@link http://www.gnu.org/copyleft/lesser.html}
   */

Class documentation
======================
Required for all classes. 

The following fields are required:

- a brief one line description of the class
- A longer description of the class with examples for all but trivial 
  classes.
- @package
- @version
- @package
- @copyright
- @license

The following fields are optional

- @tutorial, if there are relevant tutorials 
- @uses, if this class depends on other packages
- @see, if this class has related classes

Example: ::

      /**
      * One line description of the class
      *
      * Extensive documentation of the class. Feel free to use some
      * inline code
      * <code>
      * like this
      * </code>
      * If you have, link to @tutorials
      * @see all_related_classes
      * @uses other_packages
      *
      * @package PackageName
      * @copyright Copyright (C) 2005 eZ systems as. All rights reserved.
      * @license LGPL {@link http://www.gnu.org/copyleft/lesser.html}
      * @version //autogen//
      */

Method  documentation
=====================
Required for all methods and functions

The following fields are required:

- A brief (one line) description of what the class does. We use the 
  following wording conventions (snatched from the excellent Qt 
  documentation)
  
  - Wording: First word of description should always be a verb.
  - Wording: "Constructs a/the" for all constructors
  - Wording: "Returns ...." for all functions returning something except if the
    returned value is not the significant for the duty of the method.

- @param
- @return

The following fields are optional:

- A longer description of what the function does. If natural mention the 
  various parameters. If used the description field must follow the brief 
  description.
- @see, if there are other related methods/functions.

Example 1: (With object parameters) ::

     /**
     * Returns the length of the line defined in two dimensional space 
     * between point point1 and point2.
     * 
     * @param Point $point1
     * @param Point $point2
     * @return int
     */

     Generates something like:
     int calculateLength( Point point1, Point point2 )
     Returns the length of the line defined in two dimensional space between 
     point point1 and point2.

     Returns: int
     Parameters:
     Point $point1
     Point $point2

Note how the parameters are not documented since they are already 
mentioned in the description.

Example2: (Same as above but with optional extra parameter and array 
arguments)::

     /* 
     * Returns the length of the line defined in two dimensional space 
     * between point point1 and point2.
     * 
     * @param array $point1 Format array( 'x' => int, 'y' => int )
     * @param array $point2 Format array( 'x' => int, 'y' => int )
     * @param int $multiplier Multiplies the result by the given factor.
     * @return int
     */
     
     Generates something like:
     int calculateLength( array point1, array point2, int multiplier = 1 )
     Returns the length of the line defined in two dimensional space between 
     point point1 and point2.

     Returns: int
     Parameters:
     Point $point1 Format array( 'x' => int, 'y' => int )
     Point $point2 Format array( 'x' => int, 'y' => int )
     int multiplier Multiplies the result by the given factor.

Note how the additional optional parameter _is_ documented since it is 
not mentioned in the normal description. Of course in this case you 
could choose to mention it there instead.


Function parameter and return types
---------------------------------------
- All parameter and return types must be documented with at least their
  type and parameter name in the case of parameters. If it is not obvious 
  what the return value/parameter does, and it is not explained in the 
  description of the method, a description must be written. Do not add 
  descriptions of obvious parameters/return types if they are explained
  in the description text.This is to avoid cluttering the documentation 
  with obvious stuff.
- If the type is array, we must describe the requirements to the contents
  of the array. This is done by specifying the type for normal arrays or
  the expected key's and corresponding value type if it is a hash array.
  Example of normal array of ints::

	  array(int)
 
 Example of a hash array::

	  array( 'key' => valueType, ... )

- Default values are auto documented, never document the default unless
  it is not obvious what it does.


phpDocumentor tags and required usage
========================================

@abstract
-------------
PHP4 only and not used by us.

@access  
-----------
PHP4 only and not used by us.

@author 
-----------
Required in Page level dockblocks for files without classes and in class
level dockblocks for files with classes. It should always read "eZ systems".

@category
-------------
Required in the page level dockblocks in source files of tie-in packages. 
That is packages directly related to some main package where the separation 
exists only to avoid dependencies.

@copyright
-------------
Required in either the page or class level dockblocks. It should be in the
form "Copyright (C) 1999-2005 eZ systems as. All rights reserved."

@deprecated 
---------------
Required to use for everything that is deprecated. If a complete page or class
is deprecated you should add this tag only to the page or class level dockblock.

@example 
------------
Optional usage when making big examples. These can be in source files which we 
can then actually check for correct behavior. 

@final 
---------
PHP4 only and not used by us.

@filesource
-------------
Required in the page level documentation.

@global
-----------
Required when creating global variables. I can't think of any reasons why we 
would want to create that though.

@ignore
-------------
Use if needed

@internal 
-------------
Required when documenting public functionality and you want to add information 
that is developer specific.

@license
------------
Required for the documentation of all files. It should always read:
"LGPL {@link http://www.gnu.org/copyleft/lesser.html}"

@link
-----------
Required when linking in the documentation. 

@name
----------
Should never be used.

@package
-----------
Required in the page level dockblock of all source files. Always use the package
name.

@param
----------
Required for all function parameters. The type and variable name paramterers are
required. The description should be used if the purpose of the parameter is not
mentioned in the method description.

@return 
-----------
Required for all methods. The type parameter is required and should be set to
void for non-returning methods. The description should be used if the purpose 
of the return value is not mentioned in the method description.

@see 
----------
Required to use when documenting methods or classes that have similar purpose.

@since 
----------
Required when adding new functionality to a package after the initial release.

@static
----------
PHP4 only and not used by us.

@staticvar
------------
PHP4 only and not used by us.

@subpackage
-----------
Not used.

@todo
---------
Required to use when functionality is not finished. Packages should never
contain TODO items when they are released.

@tutorial 
----------
Required to use for all classes that have a relevant tutorial.

@uses 
--------
Required for classes that have dependencies on other packages. The use should 
display what package you use. Should only be used in class documentation.

@var
--------
Required for all class variables. 

@version 
----------
Required in all file descriptions. The file version should be autogenerated.


