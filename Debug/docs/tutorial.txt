eZ components - Debug
~~~~~~~~~~~~~~~~~~~~~

.. contents:: Table of Contents

Introduction
============

The Debug component provides an API to log and time debug events. This
component depends mainly on the EventLog. The functionality of the Debug
component is devided in two parts:

- Writing debug messages.
- Measuring the execution time.

Writing a debug message is almost the same as writing a message with the
EventLog. However, there is one major distinction. Messages written with the
EventLog are supposed to be written to a storage (log files, database, etc). 
Messages written with the Debug component are usually directly formatted and  
displayed. Note that the Debug::log() method has a slightly different signature
than the EventLog::log() method. 

Timing information is captured by starting and stopping timers using the public
methods from ezcDebug. The timing information is stored in a structure with raw
data. This structure should be formatted and displayed at the end of the
script.

The Debug summary output can be formatted with an implementation from
ezcDebugOutputFormatter. The default, and currently only, implementation of a
formatter is ezcDebugHtmlFormatter. This HTML formatter transforms the raw log
messages and raw timing information in a HTML string. This HTML string can be
displayed at the end of each HTML page (generated by a PHP script). 


Class overview
==============

The following classes are most important to use, extend, or implement:

ezcDebug
  Provides the public API for writing Debug messages and capturing timing
  information.

ezcDebugOutputFormatter
  The ezcDebugOutputFormatter provides an interface for the debug output
  format. New implementations can format the raw log messages and timing
  information in any output format. 

ezcDebugHtmlFormatter
  ezcDebugHtmlFormatter is an implementation from the ezcDebugOutputFormatter
  interface. This formatter reads the raw log and timing information and
  returns it as a string with a HTML layout. This string can be output directly
  in the HTML page. 
  
See class documentation for more information.


Usage
=====

Writing a log message to a file.
--------------------------------

The following script writes a message to the Debug component. At the end of the
script the log message is formatted and printed. 

.. include:: tutorial_log_message.php
   :literal:

Writing log messages is almost the same as writing them to the EventLog. As a
matter of fact, the EventLog is internally used. 

Further information about writing log messages can be found in the EventLog
component. 


Timers
------

The timers from ezcDebug can be used for two purposes:

- Timers, measure the time between two points in the program. 
- Accumulators, get the current time after a certain point (for example after
  starting the script)
 
Both methods are executed with ezcDebug::startTimer(), ezcDebug::stopTimer(),
and ezcDebug::switchTimer(). The next script demonstrates the usage of these
methods:

.. include:: tutorial_timers.php
   :literal:

The output looks like:

.. image:: img/debug_tutorial_timers.png


The output has two groups: output and accumulators. In the group "output" are
two timers: "Hello world" and "Goodbye cruel world".

The "accumulators" group has one timer, which is called "Program runtime". This
timer took in total: 0.00034 seconds. In this timer are several "switch
timers". These show the time since the "Program runtime" was started.


Recursive timers
----------------

Sometimes a specific code block repeats. For example to measure the time a
PHP statement takes in a loop. The Debug timer will calculate the avarage time
of the repeative statement and display it in the debug summary. See the next 
script:

.. include:: tutorial_recursive_timers.php
   :literal:

And the output is as follows:

.. image:: img/debug_tutorial_recursive_timers.png



..
   Local Variables:
   mode: rst
   fill-column: 79
   End: 
   vim: et syn=rst tw=79
