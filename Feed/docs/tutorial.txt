eZ Components - Feed
~~~~~~~~~~~~~~~~~~~~

.. contents:: Table of Contents

Introduction
============

Description
-----------

The purpose of the Feed component is to handle parsing and creating RSS and
ATOM feeds.


Class overview
==============

An overview of the most important classes in the Feed component.


Base classes
------------

ezcFeed
  Defines a feed object of a specified type. Can be created from scratch or
  from an existing XML document (with autodetection of type). It can be
  generated into an XML document.

ezcFeedElement
  Defines an element in a feed object.


Supported feed types and modules
--------------------------------

A feed has a type (eg. RSS1, RSS2 or ATOM). The feed type defines which
processor is used to parse and generate that type. The following feed
processors are supported by the Feed component:

- RSS1 (ezcFeedRss1)
- RSS2 (ezcFeedRss2)
- ATOM (ezcFeedAtom)

A new processor can be defined by creating a class which extends the class
ezcFeedProcessor and implements the interface ezcFeedParser, and adding it to the
ezcFeed::$supportedFeedTypes array.


Working with feeds
==================

Feeds can be created from scratch or from existing XML documents (stored in an
URI or in a string variable). The information stored in the feed can be
modified, or new information can be added. The feed object can be converted to
an XML document.


Creating a feed object
----------------------

A feed object can be created in different ways:

- by calling the constructor with the required feed type. Example::

    $feed = new ezcFeed( 'rss2' );

- by parsing an existing XML file or URI. The feed type of the resulting
  ezcFeed object will be auto-detected. Example::

    $feed = ezcFeed::parse( 'http://www.example.com/rss2.xml' );

- by parsing an XML document stored in a string variable. The feed type of
  the resulting ezcFeed object will be autodetected. Example::

    $feed = ezcFeed::parseContent( $xmlString );


Feed operations
---------------

In the following examples $feed is an existing ezcFeed object.

Possible feed operations:

- set/get a value from the feed document. Example::

    $feed->title = 'News';
    $title = $feed->title;

- iterate over the items in the feed. Example::

    // retrieve the titles from the feed items
    foreach ( $feed->items as $item )
    {
        $titles[] = $item->title;
    }

- add a new item to the feed. Example::

    $item = $feed->add( 'item' );
    $item->title = 'Item title';

- generate an XML document from the ezcFeed object. Example::

    $xml = $feed->generate();


Applications
============

Podcasts
--------

A podcast is a collection of media files distributed over the Internet using
feeds.

The Feed component supports creating and parsing feeds which define podcasts.


Parse an RSS2 podcast
`````````````````````

The following example shows how to parse an RSS2 podcast::

    $feed = ezcFeed::parse( 'http://www.example.com/podcast.xml' );

    $media = array();
    foreach ( $feed->items as $item )
    {
        if ( isset( $item->enclosure[0] ) )
        {
            $enclosure = $item->enclosure[0];

            $media[] = array(
               'url' => isset( $enclosure->url ) ? $enclosure->url : 'not defined',
               'length' => isset( $enclosure->length ) ? $enclosure->length : 'not defined',
               'type' => isset( $enclosure->type ) ? $enclosure->type : 'not defined' );
        }
    }

After running the code, the array $media will contain the URL, length and type
of the media files specified in the feed.


Create an RSS2 podcast
``````````````````````

The following example shows how to create an RSS2 podcast with 2 media files::

    $feed = new ezcFeed( 'rss2' );

    $feed->title = 'Feed title';

    $link = $feed->add( 'link' );
    $link->set( 'Feed link' );

    $feed->description = 'Feed description';

    $item = $feed->add( 'item' );
    $item->title = 'Title for media file 1';
    $item->link = 'Link for media file 1';
    $item->description = 'Description for media file 1';

    $enclosure = $item->add( 'enclosure' );
    $enclosure->url = 'http://www.example.com/media_file1.mp3';
    $enclosure->length = 4300;
    $enclosure->type = 'audio/x-mp3';

    $item = $feed->add( 'item' );
    $item->title = 'Title for media file 2';
    $item->link = 'Link for media file 2';
    $item->description = 'Description for media file 2';

    $enclosure = $item->add( 'enclosure' );
    $enclosure->url = 'http://www.example.com/media_file2.mp3';
    $enclosure->length = 6500;
    $enclosure->type = 'audio/x-mp3';


Writing feed-independent applications
=====================================

As each feed type (RSS1, RSS2, ATOM) is different, it can be quite difficult
to switch a feed generation application from one feed type to another. It is
therefore important to know what elements are common to all feed type, and how
the Feed component handles those elements.

The Feed component will ignore elements which are not defined for the current
feed type (for example if you set the subtitle element, it will be ignored in
RSS1 because it is not defined in the RSS1 specifications).


Elements common to all feed types
---------------------------------

title
`````

- Required in all feed types.
- In ATOM it has an optional attribute 'type' which can be 'text', 'html' or
  'xhtml'.


link
````

- Required in RSS1 and RSS2.
- In RSS2 and ATOM can appear multiple times, but in RSS1 can appear only one
  time.


description
```````````

- Required in RSS1 and RSS2.
- Called 'subtitle' in ATOM (accessed as 'description' through ezcFeed).


item
````

- Optional in RSS2 and ATOM, but RSS1 must have at least one item present.
- Called 'entry' in ATOM (accessed as 'item' through ezcFeed).
- These sub-elements of item are present in all feed types:

  title
    Present in all feed types.

  link
    RSS2 can have multiple links per item.

  description
    Called 'content' in ATOM (accessed as 'description' through ezcFeed). In
    ATOM it has other attributes, for example type ('text', 'html').


image
`````

- Optional in all feed types.
- Called 'logo' in ATOM (accessed as 'image' through ezcFeed).
- RSS1 and RSS2 have attributes for the image, while ATOM does not have them.


Best practices
==============

This section lists some useful tips for handling feed documents.


ATOM
----

Media type
``````````

All ATOM feeds must be identified with the *application/atom+xml* media type.
Use the getContentType() method of ezcFeed to get this string.


Self link
`````````

All ATOM feeds should have a *link* feed element with *rel="self"* which
points back to the feed itself (with the *href* attribute).


RSS1
----

Media type
``````````

All RSS1 feeds should be identified with the *application/rss+xml* media type
(although it is not a standard yet). Use the getContentType() method of
ezcFeed to get this string.


Self link
`````````

All RSS1 feeds are required to have the *about* attribute which points back to
the feed itself.


RSS2
----

Media type
``````````

All RSS2 feeds should be identified with the *application/rss+xml* media type
(although it is not a standard yet). Use the getContentType() method of
ezcFeed to get this string.


Using feeds in applications
===========================

Provide access to feeds in a web application
--------------------------------------------

There are some methods to let the user know that a web application provides a
web feed, so that the user can save the feed link in his feed aggregator.


Automatic feed discovery
````````````````````````

In the HTML source of every page add this line for RSS (1, 2) feeds::

    <link rel="alternate" type="application/rss+xml" href="url to the feed xml
    document" title="A title for the feed" />

Or this line for ATOM feeds::

    <link rel="alternate" type="application/atom+xml" href="url to the feed
    xml document" title="A title for the feed" />

In modern browsers the user will be informed (usually via a small icon like
|feed icon| in one corner of the browser or in the address bar) that the
current page has a web feed. If the user clicks on this icon his feed
aggregator client will start and save the link to the feed in its database
(if the user's system has a feed aggregator client and is configured to
handle *application/rss+xml* and *application/atom+xml* content with the
aggregator).

Multiple feeds can be added to the same page (for example you can provide ATOM
and RSS2 feeds). Note: some browsers might not recognize the non-standard
*application/rss+xml* type and select the ATOM feed by default.

The *title* attribute of the *link* HTML tag can be used to differentiate
between multiple feeds (for example "News", "Latest offers", etc).


Link to the feed document
`````````````````````````

In the HTML source of every page (usually in the header and/or footer) add
this line for RSS (1, 2) feeds::

    <a type="application/rss+xml" href="url to the feed document"
    title="A title for the feed">RSS feed</a>

Or this line for ATOM feeds::

    <a type="application/atom+xml" href="url to the feed document"
    title="A title for the feed">ATOM feed</a>

The user can drag this link to his feed aggregator, where it will be added to
the aggregator's database.

It is customary to add the feed icon |feed icon| next to a feed link, so that
the user finds the feed link easier on the page. See this Mozilla__ page for
more information about the feed icon.

__ http://www.mozilla.org/foundation/feed-icon-guidelines/

.. |feed icon| image:: img/feed-icon-14x14.png


Specifications and RFCs
=======================

For a list of supported RFCs and specifications of the feed types and modules,
please see the `specifications`_ page.

.. _specifications: Feed_specifications.html



..
   Local Variables:
   mode: rst
   fill-column: 79
   End:
   vim: et syn=rst tw=79 nocin
