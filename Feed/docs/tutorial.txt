eZ Components - Feed
~~~~~~~~~~~~~~~~~~~~

.. contents:: Table of Contents

Introduction
============

Description
-----------

The purpose of the Feed component is to handle parsing and creating RSS and
ATOM feeds.


XML feeds overview
==================

An XML feed is an XML document with a certain structure, which lists a series
of *entries* or *items*.

Example
-------

An example XML feed::

  <?xml version="1.0"?>
  <rss version="2.0">
    <channel>
      <title>Liftoff News</title>
      <link>http://liftoff.msfc.nasa.gov/</link>
      <description>Liftoff to Space Exploration.</description>
      <language>en-us</language>
      <pubDate>Tue, 10 Jun 2003 04:00:00 GMT</pubDate>
      <webMaster>webmaster@example.com</webMaster>
      <item>
        <title>The Engine That Does More</title>
        <link>http://liftoff.msfc.nasa.gov/news/2003/news-VASIMR.asp</link>
        <description>Before man travels to Mars, NASA hopes to design new engines that will let us fly through the Solar System more quickly.  The proposed VASIMR engine would do that.</description>
        <pubDate>Tue, 27 May 2003 08:37:32 GMT</pubDate>
        <guid>http://liftoff.msfc.nasa.gov/2003/05/27.html#item571</guid>
      </item>
      <item>
        <title>Astronauts' Dirty Laundry</title>
        <link>http://liftoff.msfc.nasa.gov/news/2003/news-laundry.asp</link>
        <description>Compared to earlier spacecraft, the International Space Station has many luxuries, but laundry facilities are not one of them.  Instead, astronauts have other options.</description>
        <pubDate>Tue, 20 May 2003 08:56:02 GMT</pubDate>
        <guid>http://liftoff.msfc.nasa.gov/2003/05/20.html#item570</guid>
      </item>
    </channel>
  </rss>

This XML document describes an RSS2 feed, with channel elements *title*,
*link*, *description*, *language*, *pubDate* and *webMaster*. The XML document
also contains 2 entries (*item*), each one with the elements *title*, *link*,
*description*, *pubDate* and *guid*. These elements are not the only ones
present in RSS2 feeds, and some elements are not required to be present.

The Feed document allows creating and parsing such XML documents. The feed
types supported by the Feed component are ATOM, RSS1 and RSS2.


Modules
-------

XML feeds are extensible through modules. A module has a namespace and certain
XML elements. An example of a feed module is iTunes, which allows creating and
parsing podcasts for the `iTunes`_ media player.


Applications
------------

XML feeds can be used in many applications:

- **content aggregation** - blogs or journals can provide their content in an
  XML feed form. Subscribers to a feed are able to view content aggregated
  from  multiple websites in one location, using an `aggregator`_ software
  program.
- **news** - websites can provide news in a feed format. The advantage is that
  users do not need to check a website or subscribe to newsletters, but
  instead can have news from multiple sources in their `aggregator`_ program.
- **podcasts** - XML feeds can have *enclosures*, which are links to media
  files (audio, video, pdf, etc). Some `aggregator`_ programs or the `iTunes`_
  media player can download automatically these media files when they become
  available.


Class overview
==============

An overview of the most important classes in the Feed component.


Base classes
------------

ezcFeed
  Defines a feed object of a specified type. Can be created from scratch or
  from an existing XML document (with autodetection of type). It can be
  generated into an XML document.

ezcFeedElement
  Defines an element in a feed object.

ezcFeedItem
  Defines a feed item in a feed object.

ezcFeedModule
  Base class for all feed modules.


Supported feed types
--------------------

A feed has a type (eg. RSS1, RSS2 or ATOM). The feed type defines which
processor is used to parse and generate that type. The following feed
processors are supported by the Feed component:

- RSS1 (ezcFeedRss1) - `RSS1 specifications`_
- RSS2 (ezcFeedRss2) - `RSS2 specifications`_
- ATOM (ezcFeedAtom) - `ATOM specifications`_

A new processor can be defined by creating a class which extends the class
ezcFeedProcessor and implements the interface ezcFeedParser, and adding it to the
ezcFeed::$supportedFeedTypes array.


Supported feed modules
----------------------

The following modules are supported by the Feed component:

- Content (ezcFeedContentModule) - `Content specifications`_
- CreativeCommons (ezcFeedCreativeCommonsModule) -
  `CreativeCommons specifications`_
- DublinCore (ezcFeedDublinCoreModule) - `DublinCore specifications`_
- iTunes (ezcFeedITunesModule) - `iTunes specifications`_

A new module can be defined by creating a class which extends the class
ezcFeedModule, and adding it to the ezcFeed::$supportedModules and
ezcFeed::$supportedModulesPrefixes arrays.


Working with feeds
==================

Feeds can be created from scratch or from existing XML documents (stored in an
URI or in a string variable). The information stored in the feed can be
modified, or new information can be added. The feed object can be converted to
an XML document.


Creating a feed object
----------------------

A feed object can be created in different ways:

- by calling the constructor with the required feed type. Example::

    $feed = new ezcFeed( 'rss2' );

- by parsing an existing XML file or URI. The feed type of the resulting
  ezcFeed object will be auto-detected. Example::

    $feed = ezcFeed::parse( 'http://www.example.com/rss2.xml' );

- by parsing an XML document stored in a string variable. The feed type of
  the resulting ezcFeed object will be autodetected. Example::

    $feed = ezcFeed::parseContent( $xmlString );


Feed operations
---------------

In the following examples $feed is an existing ezcFeed object.

Possible feed operations:

- set/get a value from the feed document. Example::

    $feed->title = 'News';
    $title = $feed->title;

- iterate over the items in the feed. Example::

    // retrieve the titles from the feed items
    foreach ( $feed->items as $item )
    {
        $titles[] = $item->title;
    }

- add a new item to the feed. Example::

    $item = $feed->add( 'item' );
    $item->title = 'Item title';

- add a new module to the feed item. Example::

    $item = $feed->add( 'item' );
    $module = $item->addModule( 'Content' );
    $module->encoded = 'text content';

- iterate over the loaded modules in a feed item. Example::

    // display the namespaces of the modules loaded in the feed item $item
    foreach ( $item->getModules() as $moduleName => $module )
    {
        echo $module->getNamespace();
    }

- generate an XML document from the ezcFeed object. The result string should be
  saved to a file, and a link to a file made accessible. See
  `Provide access to feeds in a web application`_. Example::

    $xml = $feed->generate();


Applications
============

Podcasts
--------

A podcast is a collection of media files distributed over the Internet using
feeds.

The Feed component supports creating and parsing feeds which define podcasts.


Parse an RSS2 podcast
`````````````````````

The following example shows how to parse an RSS2 podcast::

    $feed = ezcFeed::parse( 'http://www.example.com/podcast.xml' );

    $media = array();
    foreach ( $feed->items as $item )
    {
        if ( isset( $item->enclosure[0] ) )
        {
            $enclosure = $item->enclosure[0];

            $media[] = array(
               'url' => isset( $enclosure->url ) ? $enclosure->url : 'not defined',
               'length' => isset( $enclosure->length ) ? $enclosure->length : 'not defined',
               'type' => isset( $enclosure->type ) ? $enclosure->type : 'not defined',
               'duration' => isset( $item->iTunes ) && isset(
               $item->iTunes->duration ) ? $item->iTunes->duration : 'not
               defined' );
        }
    }

After running the code, the array $media will contain the URL, length and type
of the media files specified in the feed, and the duration taken from the
`iTunes`_ module contained in the feed (if available). See the
`specifications`_ section for more information about the `iTunes`_ module.


Create an RSS2 podcast
``````````````````````

The following example shows how to create an RSS2 podcast with 2 media files::

    $feed = new ezcFeed( 'rss2' );

    $feed->title = 'Feed title';

    $link = $feed->add( 'link' );
    $link->set( 'Feed link' );

    $feed->description = 'Feed description';

    $item = $feed->add( 'item' );
    $item->title = 'Title for media file 1';
    $item->link = 'Link for media file 1';
    $item->description = 'Description for media file 1';

    $enclosure = $item->add( 'enclosure' );
    $enclosure->url = 'http://www.example.com/media_file1.mp3';
    $enclosure->length = 4300;
    $enclosure->type = 'audio/x-mp3';

    $item = $feed->add( 'item' );
    $item->title = 'Title for media file 2';
    $item->link = 'Link for media file 2';
    $item->description = 'Description for media file 2';

    $enclosure = $item->add( 'enclosure' );
    $enclosure->url = 'http://www.example.com/media_file2.mp3';
    $enclosure->length = 6500;
    $enclosure->type = 'audio/x-mp3';


Using the iTunes module
```````````````````````

A feed should be described with iTunes elements in order to be used as a
podcast in the music player `iTunes`_. The previous example becomes as follows
::

    $feed = new ezcFeed( 'rss2' );

    $feed->title = 'Feed title';

    $link = $feed->add( 'link' );
    $link->set( 'Feed link' );

    $feed->description = 'Feed description';

    $iTunes = $feed->addModule( 'iTunes' );

    // add an image for the podcast
    $image = $iTunes->add( 'image' );
    $image->href = 'URL of the image file';

    $iTunes->keywords = 'keyword1,keyword2,keyword3';

    // add the podcast in one or more categories + sub-categories
    // see http://www.apple.com/itunes/store/podcaststechspecs.html#categories
    // for iTunes categories
    $category = $iTunes->add( 'category' );
    $category->text = 'iTunes category';
    $subCategory = $category->add( 'category' );
    $subCategory->text = 'iTunes sub-category';

    $item = $feed->add( 'item' );
    $item->title = 'Title for media file 1';
    $item->link = 'Link for media file 1';
    $item->description = 'Description for media file 1';

    $enclosure = $item->add( 'enclosure' );
    $enclosure->url = 'http://www.example.com/media_file1.mp3';
    $enclosure->length = 4300;
    $enclosure->type = 'audio/x-mp3';

    $iTunes = $item->addModule( 'iTunes' );
    $iTunes->author = 'Author name';

    // set a duration of 3 min 51 sec for this enclosure
    $iTunes->duration = '03:51';
    $iTunes->keywords = 'keyword1,keyword2';

    $item = $feed->add( 'item' );
    $item->title = 'Title for media file 2';
    $item->link = 'Link for media file 2';
    $item->description = 'Description for media file 2';

    $enclosure = $item->add( 'enclosure' );
    $enclosure->url = 'http://www.example.com/media_file2.mp3';
    $enclosure->length = 6500;
    $enclosure->type = 'audio/x-mp3';

    $iTunes = $item->addModule( 'iTunes' );
    $iTunes->author = 'Author name';

    // set a duration of 1 hour 4 min 30 sec for this enclosure
    $iTunes->duration = '01:04:30';
    $iTunes->keywords = 'keyword1';


Writing feed-independent applications
=====================================

As each feed type (RSS1, RSS2, ATOM) is different, it can be quite difficult
to switch a feed generation application from one feed type to another. It is
therefore important to know what elements are common to all feed type, and how
the Feed component handles those elements.

The Feed component will ignore elements which are not defined for the current
feed type (for example if you set the subtitle element, it will be ignored in
RSS1 because it is not defined in the RSS1 specifications).


Elements common to all feed types
---------------------------------

title
`````

- Required in all feed types.
- In ATOM it has an optional attribute 'type' which can be 'text', 'html' or
  'xhtml'.


link
````

- Required in RSS1 and RSS2.
- In RSS2 and ATOM can appear multiple times, but in RSS1 can appear only one
  time.


description
```````````

- Required in RSS1 and RSS2.
- Called 'subtitle' in ATOM (accessed as 'description' through ezcFeed).


item
````

- Optional in RSS2 and ATOM, but RSS1 must have at least one item present.
- Called 'entry' in ATOM (accessed as 'item' through ezcFeed).
- These sub-elements of item are present in all feed types:

  title
    Present in all feed types.

  link
    RSS2 can have multiple links per item.

  description
    Called 'content' in ATOM (accessed as 'description' through ezcFeed). In
    ATOM it has other attributes, for example type ('text', 'html').


image
`````

- Optional in all feed types.
- Called 'logo' in ATOM (accessed as 'image' through ezcFeed).
- RSS1 and RSS2 have attributes for the image, while ATOM does not have them.


Feed creator example
--------------------

In the sub-directory *Feed/docs/examples* there is a **feed_creator**
application which can be used to create simple XML feeds from minimal text
files.

The structure of the text files accepted by this application is::

  Feed title
  Feed link
  Feed author name
  Feed author email
  Feed description

  Item 1 title
  Item 1 link
  Item 1 author name
  Item 1 author email
  Item 1 author description

  Item 2 title
  Item 2 link
  Item 2 author name
  Item 2 author email
  Item 2 author description

  .. etc

An example of an input text file:

.. include:: examples/feed_creator/data/news.txt
   :literal:

The **feed_creator** application will read an input file with the above
structure and output an XML feed of the chosen type (rss1, rss2 or atom). An
XML file will also be written in the same directory as the input file, with
the name of the input file plus the *.xml* extension.

Example of usage (current directory is the `feed_creator` directory)::

  php feed_creator.php rss2 data/news.txt

After running this command, the file *data/news.xml* will be created,
containing an RSS2 feed with the values read from *data/news.txt*:

.. include:: examples/feed_creator/data/news.xml
   :literal:

See the section `Provide access to feeds in a web application`_ for details on
how to provide access to the generated XML feed.


Best practices
==============

This section lists some useful tips for handling feed documents.


ATOM
----

Media type
``````````

All ATOM feeds must be identified with the *application/atom+xml* media type.
Use the getContentType() method of ezcFeed to get this string.


RSS1
----

Media type
``````````

All RSS1 feeds should be identified with the *application/rss+xml* media type
(although it is not a standard yet). Use the getContentType() method of
ezcFeed to get this string.


RSS2
----

Media type
``````````

All RSS2 feeds should be identified with the *application/rss+xml* media type
(although it is not a standard yet). Use the getContentType() method of
ezcFeed to get this string.


Using feeds in applications
===========================

Provide access to feeds in a web application
--------------------------------------------

There are some methods to let the user know that a web application provides a
web feed, so that the user can save the feed link in his feed aggregator.


Automatic feed discovery
````````````````````````

In the HTML source of every page add this line for RSS (1, 2) feeds::

    <link rel="alternate" type="application/rss+xml" href="url to the feed xml
    document" title="A title for the feed" />

Or this line for ATOM feeds::

    <link rel="alternate" type="application/atom+xml" href="url to the feed
    xml document" title="A title for the feed" />

In modern browsers the user will be informed (usually via a small icon like
|feed icon| in one corner of the browser or in the address bar) that the
current page has a web feed. If the user clicks on this icon his feed
aggregator client will start and save the link to the feed in its database
(if the user's system has a feed aggregator client and is configured to
handle *application/rss+xml* and *application/atom+xml* content with the
aggregator).

Multiple feeds can be added to the same page (for example you can provide ATOM
and RSS2 feeds). Note: some browsers might not recognize the non-standard
*application/rss+xml* type and select the ATOM feed by default.

The *title* attribute of the *link* HTML tag can be used to differentiate
between multiple feeds (for example "News", "Latest offers", etc).


Link to the feed document
`````````````````````````

In the HTML source of every page (usually in the header and/or footer) add
this line for RSS (1, 2) feeds::

    <a type="application/rss+xml" href="url to the feed document"
    title="A title for the feed">RSS feed</a>

Or this line for ATOM feeds::

    <a type="application/atom+xml" href="url to the feed document"
    title="A title for the feed">ATOM feed</a>

The user can drag this link to his feed aggregator, where it will be added to
the aggregator's database.

It is customary to add the feed icon |feed icon| next to a feed link, so that
the user finds the feed link easier on the page. See this Mozilla__ page for
more information about the feed icon.

__ http://www.mozilla.org/foundation/feed-icon-guidelines/

.. |feed icon| image:: img/feed-icon-14x14.png


Feed validation
===============

Feeds should be validated against a `feed validator`_.


Specifications and RFCs
=======================

For a list of supported RFCs and specifications of the feed types and modules,
please see the `specifications`_ page.

.. _specifications: Feed_specifications.html
.. _feed validator: http://validator.w3.org/feed/

.. _iTunes: http://www.apple.com/itunes/

.. _RSS1 specifications: http://web.resource.org/rss/1.0/spec
.. _RSS2 specifications: http://www.rssboard.org/rss-specification
.. _ATOM specifications: http://atompub.org/rfc4287.html

.. _Content specifications: http://purl.org/rss/1.0/modules/content/
.. _CreativeCommons specifications: http://backend.userland.com/creativeCommonsRssModule
.. _DublinCore specifications: http://dublincore.org/documents/dces/
.. _iTunes specifications: http://www.apple.com/itunes/store/podcaststechspecs.html

.. _aggregator: http://en.wikipedia.org/wiki/List_of_feed_aggregators



..
   Local Variables:
   mode: rst
   fill-column: 79
   End:
   vim: et syn=rst tw=79 nocin
