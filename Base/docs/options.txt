eZ components - Base - ezcBaseOptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. contents:: Table of Contents

Introduction
============

The ezcBaseOptions class is the base class for all option implementations in
eZ components. Every class that utilizes options to configure the behavior of
its instances using options must use a derivate of this class to implement the
options mechanism.

Implementation
==============

In the following description, a fictional package Foo will be used, which 
contains a fictional class ezcFooBar. The instances of ezcFooBar can be 
configured using options.

Status before 1.1
-----------------

Before version 1.1 of the eZ components object options could be set and
retrieved in the following ways:

- __construct( ... array $options = array() )
- void setOptions( array $options )
- array getOptions( array $options )

For the example class ezcFooBar, an implementation could have looked like this:

::
    class ezcFooBar
    {
    
        private $options = array( 'foo' => 1 );
        
        public function __construct( array $options )
        {
            $this->setOptions( $array );
        }

        public function setOptions ( array $options )
        {
            foreach ( $options as $key => $value )
            {
                switch ( $key )
                {
                    case "foo":
                        if ( !is_int( $val ) || $val < 0 )
                        {
                            throw new ezcBaseSettingValueException( $propertyName, $val, 'int >= 0' );
                        }
                        break;
                    default:
                        throw new ezcBaseSettingNotFoundException( $propertyName );
                }
                $this->options[$key] = $value;
            }
        }

        public functions getOptions()
        {
            return $this->options
        }
    }

The usage of setOptions() and getOptions() is useful, but not really
comfortable, because as a user of this class you would have to do the following
to change options after construction of the desired object:

::

    ...
    $options = $foo->getOptions();
    $options["foo"] = 10;
    $foo->setOptions( $options );
    ...

or

::

    ...
    $options = array( "foo" => 10 );
    $foo->setOptions( $options );

Status after 1.1
----------------

The new option handling will be fully backwards compatible to the old one and
therefore not break BC. It will allow a much more convenient handling of
options after object instantiation:

::

    $foo->options->foo = 10;

Beside that (because of BC reasons), the following access possibility will
also exist:

::

    $foo->options["foo"] = 10;

This possibility will not be officially documented and its usage will be
discouraged in favor of the first one, to keep code using eZ components
consistent.

To migrate your component to the new option handling system, you have to
perform the following steps (still using the Foo package example):

1. Create a new class called ezcFooBarOptions, which extends the ezcBaseOptions
   class.
2. Move the default values of the options for ezcFooBar as private properties
   into the ezcFooBarOptions class.
3. Move the validity checks you formally performed in the setOptions() method
   of ezcFooBar into the __set() method of the ezcFooBarOptions.
4. Adjust ezcFooBar::setOptions() and ezcFooBar::getOptions() as shown below.

::

    class ezcFooBar
    {
    
        private $options;
        
        public function __construct( $options )
        {
            $this->setOptions( $array );
        }

        public function setOptions ( $options )
        {
            if ( $options instanceof ezcFooBarOptions )
            {
                $this->options = $options;
            }
            else if ( is_array( $options ) )
            {
                $this->options = new ezcFooBarOptions( $options )
            }
            else
            {
                throw new ezcBaseValueException( "options", $options, 'array or instance of ezcFooBarOptions' );
            }
        }

        public functions getOptions()
        {
            return $this->options
        }
    }

After that, you are done with the migration. 


..
   Local Variables:
   mode: rst
   fill-column: 79
   End: 
   vim: et syn=rst tw=79
